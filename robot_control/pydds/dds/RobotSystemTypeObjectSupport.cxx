// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file RobotSystemTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "RobotSystemTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "RobotSystem.hpp"


using namespace eprosima::fastdds::dds::xtypes;

namespace RobotSystem {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_EncoderStateRequest_type_identifier(
        TypeIdentifierPair& type_ids_EncoderStateRequest)
{

    ReturnCode_t return_code_EncoderStateRequest {eprosima::fastdds::dds::RETCODE_OK};
    return_code_EncoderStateRequest =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RobotSystem::EncoderStateRequest", type_ids_EncoderStateRequest);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_EncoderStateRequest)
    {
        StructTypeFlag struct_flags_EncoderStateRequest = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_EncoderStateRequest = "RobotSystem::EncoderStateRequest";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_EncoderStateRequest;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_EncoderStateRequest;
        CompleteTypeDetail detail_EncoderStateRequest = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_EncoderStateRequest, ann_custom_EncoderStateRequest, type_name_EncoderStateRequest.to_string());
        CompleteStructHeader header_EncoderStateRequest;
        header_EncoderStateRequest = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_EncoderStateRequest);
        CompleteStructMemberSeq member_seq_EncoderStateRequest;
        {
            TypeIdentifierPair type_ids_target;
            ReturnCode_t return_code_target {eprosima::fastdds::dds::RETCODE_OK};
            return_code_target =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_target);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_target)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_target))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_target = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_target = 0x00000000;
            bool common_target_ec {false};
            CommonStructMember common_target {TypeObjectUtils::build_common_struct_member(member_id_target, member_flags_target, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_target, common_target_ec))};
            if (!common_target_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure target member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_target = "target";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_target;
            ann_custom_EncoderStateRequest.reset();
            CompleteMemberDetail detail_target = TypeObjectUtils::build_complete_member_detail(name_target, member_ann_builtin_target, ann_custom_EncoderStateRequest);
            CompleteStructMember member_target = TypeObjectUtils::build_complete_struct_member(common_target, detail_target);
            TypeObjectUtils::add_complete_struct_member(member_seq_EncoderStateRequest, member_target);
        }
        CompleteStructType struct_type_EncoderStateRequest = TypeObjectUtils::build_complete_struct_type(struct_flags_EncoderStateRequest, header_EncoderStateRequest, member_seq_EncoderStateRequest);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_EncoderStateRequest, type_name_EncoderStateRequest.to_string(), type_ids_EncoderStateRequest))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "RobotSystem::EncoderStateRequest already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_EncoderStateResponse_type_identifier(
        TypeIdentifierPair& type_ids_EncoderStateResponse)
{

    ReturnCode_t return_code_EncoderStateResponse {eprosima::fastdds::dds::RETCODE_OK};
    return_code_EncoderStateResponse =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RobotSystem::EncoderStateResponse", type_ids_EncoderStateResponse);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_EncoderStateResponse)
    {
        StructTypeFlag struct_flags_EncoderStateResponse = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_EncoderStateResponse = "RobotSystem::EncoderStateResponse";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_EncoderStateResponse;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_EncoderStateResponse;
        CompleteTypeDetail detail_EncoderStateResponse = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_EncoderStateResponse, ann_custom_EncoderStateResponse, type_name_EncoderStateResponse.to_string());
        CompleteStructHeader header_EncoderStateResponse;
        header_EncoderStateResponse = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_EncoderStateResponse);
        CompleteStructMemberSeq member_seq_EncoderStateResponse;
        {
            TypeIdentifierPair type_ids_source;
            ReturnCode_t return_code_source {eprosima::fastdds::dds::RETCODE_OK};
            return_code_source =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_source);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_source)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_source))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_source = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_source = 0x00000000;
            bool common_source_ec {false};
            CommonStructMember common_source {TypeObjectUtils::build_common_struct_member(member_id_source, member_flags_source, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_source, common_source_ec))};
            if (!common_source_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure source member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_source = "source";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_source;
            ann_custom_EncoderStateResponse.reset();
            CompleteMemberDetail detail_source = TypeObjectUtils::build_complete_member_detail(name_source, member_ann_builtin_source, ann_custom_EncoderStateResponse);
            CompleteStructMember member_source = TypeObjectUtils::build_complete_struct_member(common_source, detail_source);
            TypeObjectUtils::add_complete_struct_member(member_seq_EncoderStateResponse, member_source);
        }
        {
            TypeIdentifierPair type_ids_timestamp;
            ReturnCode_t return_code_timestamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_timestamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_timestamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_timestamp)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "timestamp Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_timestamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_timestamp = 0x00000001;
            bool common_timestamp_ec {false};
            CommonStructMember common_timestamp {TypeObjectUtils::build_common_struct_member(member_id_timestamp, member_flags_timestamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_timestamp, common_timestamp_ec))};
            if (!common_timestamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure timestamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_timestamp = "timestamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_timestamp;
            ann_custom_EncoderStateResponse.reset();
            CompleteMemberDetail detail_timestamp = TypeObjectUtils::build_complete_member_detail(name_timestamp, member_ann_builtin_timestamp, ann_custom_EncoderStateResponse);
            CompleteStructMember member_timestamp = TypeObjectUtils::build_complete_struct_member(common_timestamp, detail_timestamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_EncoderStateResponse, member_timestamp);
        }
        {
            TypeIdentifierPair type_ids_status;
            ReturnCode_t return_code_status {eprosima::fastdds::dds::RETCODE_OK};
            return_code_status =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_status);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_status)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_status))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_status = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_status = 0x00000002;
            bool common_status_ec {false};
            CommonStructMember common_status {TypeObjectUtils::build_common_struct_member(member_id_status, member_flags_status, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_status, common_status_ec))};
            if (!common_status_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure status member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_status = "status";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_status;
            ann_custom_EncoderStateResponse.reset();
            CompleteMemberDetail detail_status = TypeObjectUtils::build_complete_member_detail(name_status, member_ann_builtin_status, ann_custom_EncoderStateResponse);
            CompleteStructMember member_status = TypeObjectUtils::build_complete_struct_member(common_status, detail_status);
            TypeObjectUtils::add_complete_struct_member(member_seq_EncoderStateResponse, member_status);
        }
        {
            TypeIdentifierPair type_ids_angle;
            ReturnCode_t return_code_angle {eprosima::fastdds::dds::RETCODE_OK};
            return_code_angle =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_angle);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_angle)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "angle Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_angle = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_angle = 0x00000003;
            bool common_angle_ec {false};
            CommonStructMember common_angle {TypeObjectUtils::build_common_struct_member(member_id_angle, member_flags_angle, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_angle, common_angle_ec))};
            if (!common_angle_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure angle member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_angle = "angle";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_angle;
            ann_custom_EncoderStateResponse.reset();
            CompleteMemberDetail detail_angle = TypeObjectUtils::build_complete_member_detail(name_angle, member_ann_builtin_angle, ann_custom_EncoderStateResponse);
            CompleteStructMember member_angle = TypeObjectUtils::build_complete_struct_member(common_angle, detail_angle);
            TypeObjectUtils::add_complete_struct_member(member_seq_EncoderStateResponse, member_angle);
        }
        {
            TypeIdentifierPair type_ids_radian;
            ReturnCode_t return_code_radian {eprosima::fastdds::dds::RETCODE_OK};
            return_code_radian =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_radian);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_radian)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "radian Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_radian = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_radian = 0x00000004;
            bool common_radian_ec {false};
            CommonStructMember common_radian {TypeObjectUtils::build_common_struct_member(member_id_radian, member_flags_radian, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_radian, common_radian_ec))};
            if (!common_radian_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure radian member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_radian = "radian";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_radian;
            ann_custom_EncoderStateResponse.reset();
            CompleteMemberDetail detail_radian = TypeObjectUtils::build_complete_member_detail(name_radian, member_ann_builtin_radian, ann_custom_EncoderStateResponse);
            CompleteStructMember member_radian = TypeObjectUtils::build_complete_struct_member(common_radian, detail_radian);
            TypeObjectUtils::add_complete_struct_member(member_seq_EncoderStateResponse, member_radian);
        }
        CompleteStructType struct_type_EncoderStateResponse = TypeObjectUtils::build_complete_struct_type(struct_flags_EncoderStateResponse, header_EncoderStateResponse, member_seq_EncoderStateResponse);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_EncoderStateResponse, type_name_EncoderStateResponse.to_string(), type_ids_EncoderStateResponse))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "RobotSystem::EncoderStateResponse already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_SystemStateRequest_type_identifier(
        TypeIdentifierPair& type_ids_SystemStateRequest)
{

    ReturnCode_t return_code_SystemStateRequest {eprosima::fastdds::dds::RETCODE_OK};
    return_code_SystemStateRequest =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RobotSystem::SystemStateRequest", type_ids_SystemStateRequest);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_SystemStateRequest)
    {
        StructTypeFlag struct_flags_SystemStateRequest = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_SystemStateRequest = "RobotSystem::SystemStateRequest";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SystemStateRequest;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SystemStateRequest;
        CompleteTypeDetail detail_SystemStateRequest = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SystemStateRequest, ann_custom_SystemStateRequest, type_name_SystemStateRequest.to_string());
        CompleteStructHeader header_SystemStateRequest;
        header_SystemStateRequest = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SystemStateRequest);
        CompleteStructMemberSeq member_seq_SystemStateRequest;
        {
            TypeIdentifierPair type_ids_target;
            ReturnCode_t return_code_target {eprosima::fastdds::dds::RETCODE_OK};
            return_code_target =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_target);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_target)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_target))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_target = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_target = 0x00000000;
            bool common_target_ec {false};
            CommonStructMember common_target {TypeObjectUtils::build_common_struct_member(member_id_target, member_flags_target, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_target, common_target_ec))};
            if (!common_target_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure target member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_target = "target";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_target;
            ann_custom_SystemStateRequest.reset();
            CompleteMemberDetail detail_target = TypeObjectUtils::build_complete_member_detail(name_target, member_ann_builtin_target, ann_custom_SystemStateRequest);
            CompleteStructMember member_target = TypeObjectUtils::build_complete_struct_member(common_target, detail_target);
            TypeObjectUtils::add_complete_struct_member(member_seq_SystemStateRequest, member_target);
        }
        CompleteStructType struct_type_SystemStateRequest = TypeObjectUtils::build_complete_struct_type(struct_flags_SystemStateRequest, header_SystemStateRequest, member_seq_SystemStateRequest);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SystemStateRequest, type_name_SystemStateRequest.to_string(), type_ids_SystemStateRequest))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "RobotSystem::SystemStateRequest already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_SystemStateResponse_type_identifier(
        TypeIdentifierPair& type_ids_SystemStateResponse)
{

    ReturnCode_t return_code_SystemStateResponse {eprosima::fastdds::dds::RETCODE_OK};
    return_code_SystemStateResponse =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RobotSystem::SystemStateResponse", type_ids_SystemStateResponse);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_SystemStateResponse)
    {
        StructTypeFlag struct_flags_SystemStateResponse = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_SystemStateResponse = "RobotSystem::SystemStateResponse";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SystemStateResponse;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SystemStateResponse;
        CompleteTypeDetail detail_SystemStateResponse = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SystemStateResponse, ann_custom_SystemStateResponse, type_name_SystemStateResponse.to_string());
        CompleteStructHeader header_SystemStateResponse;
        header_SystemStateResponse = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SystemStateResponse);
        CompleteStructMemberSeq member_seq_SystemStateResponse;
        {
            TypeIdentifierPair type_ids_source;
            ReturnCode_t return_code_source {eprosima::fastdds::dds::RETCODE_OK};
            return_code_source =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_source);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_source)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_source))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_source = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_source = 0x00000000;
            bool common_source_ec {false};
            CommonStructMember common_source {TypeObjectUtils::build_common_struct_member(member_id_source, member_flags_source, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_source, common_source_ec))};
            if (!common_source_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure source member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_source = "source";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_source;
            ann_custom_SystemStateResponse.reset();
            CompleteMemberDetail detail_source = TypeObjectUtils::build_complete_member_detail(name_source, member_ann_builtin_source, ann_custom_SystemStateResponse);
            CompleteStructMember member_source = TypeObjectUtils::build_complete_struct_member(common_source, detail_source);
            TypeObjectUtils::add_complete_struct_member(member_seq_SystemStateResponse, member_source);
        }
        {
            TypeIdentifierPair type_ids_timestamp;
            ReturnCode_t return_code_timestamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_timestamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_timestamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_timestamp)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "timestamp Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_timestamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_timestamp = 0x00000001;
            bool common_timestamp_ec {false};
            CommonStructMember common_timestamp {TypeObjectUtils::build_common_struct_member(member_id_timestamp, member_flags_timestamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_timestamp, common_timestamp_ec))};
            if (!common_timestamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure timestamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_timestamp = "timestamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_timestamp;
            ann_custom_SystemStateResponse.reset();
            CompleteMemberDetail detail_timestamp = TypeObjectUtils::build_complete_member_detail(name_timestamp, member_ann_builtin_timestamp, ann_custom_SystemStateResponse);
            CompleteStructMember member_timestamp = TypeObjectUtils::build_complete_struct_member(common_timestamp, detail_timestamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_SystemStateResponse, member_timestamp);
        }
        {
            TypeIdentifierPair type_ids_state;
            ReturnCode_t return_code_state {eprosima::fastdds::dds::RETCODE_OK};
            return_code_state =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_state);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_state)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "state Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_state = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_state = 0x00000002;
            bool common_state_ec {false};
            CommonStructMember common_state {TypeObjectUtils::build_common_struct_member(member_id_state, member_flags_state, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_state, common_state_ec))};
            if (!common_state_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure state member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_state = "state";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_state;
            ann_custom_SystemStateResponse.reset();
            CompleteMemberDetail detail_state = TypeObjectUtils::build_complete_member_detail(name_state, member_ann_builtin_state, ann_custom_SystemStateResponse);
            CompleteStructMember member_state = TypeObjectUtils::build_complete_struct_member(common_state, detail_state);
            TypeObjectUtils::add_complete_struct_member(member_seq_SystemStateResponse, member_state);
        }
        {
            TypeIdentifierPair type_ids_status;
            ReturnCode_t return_code_status {eprosima::fastdds::dds::RETCODE_OK};
            return_code_status =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_status);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_status)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_status))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_status = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_status = 0x00000003;
            bool common_status_ec {false};
            CommonStructMember common_status {TypeObjectUtils::build_common_struct_member(member_id_status, member_flags_status, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_status, common_status_ec))};
            if (!common_status_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure status member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_status = "status";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_status;
            ann_custom_SystemStateResponse.reset();
            CompleteMemberDetail detail_status = TypeObjectUtils::build_complete_member_detail(name_status, member_ann_builtin_status, ann_custom_SystemStateResponse);
            CompleteStructMember member_status = TypeObjectUtils::build_complete_struct_member(common_status, detail_status);
            TypeObjectUtils::add_complete_struct_member(member_seq_SystemStateResponse, member_status);
        }
        CompleteStructType struct_type_SystemStateResponse = TypeObjectUtils::build_complete_struct_type(struct_flags_SystemStateResponse, header_SystemStateResponse, member_seq_SystemStateResponse);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SystemStateResponse, type_name_SystemStateResponse.to_string(), type_ids_SystemStateResponse))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "RobotSystem::SystemStateResponse already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_PVCStateRequest_type_identifier(
        TypeIdentifierPair& type_ids_PVCStateRequest)
{

    ReturnCode_t return_code_PVCStateRequest {eprosima::fastdds::dds::RETCODE_OK};
    return_code_PVCStateRequest =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RobotSystem::PVCStateRequest", type_ids_PVCStateRequest);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_PVCStateRequest)
    {
        StructTypeFlag struct_flags_PVCStateRequest = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_PVCStateRequest = "RobotSystem::PVCStateRequest";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_PVCStateRequest;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_PVCStateRequest;
        CompleteTypeDetail detail_PVCStateRequest = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_PVCStateRequest, ann_custom_PVCStateRequest, type_name_PVCStateRequest.to_string());
        CompleteStructHeader header_PVCStateRequest;
        header_PVCStateRequest = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_PVCStateRequest);
        CompleteStructMemberSeq member_seq_PVCStateRequest;
        {
            TypeIdentifierPair type_ids_target;
            ReturnCode_t return_code_target {eprosima::fastdds::dds::RETCODE_OK};
            return_code_target =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_target);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_target)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_target))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_target = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_target = 0x00000000;
            bool common_target_ec {false};
            CommonStructMember common_target {TypeObjectUtils::build_common_struct_member(member_id_target, member_flags_target, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_target, common_target_ec))};
            if (!common_target_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure target member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_target = "target";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_target;
            ann_custom_PVCStateRequest.reset();
            CompleteMemberDetail detail_target = TypeObjectUtils::build_complete_member_detail(name_target, member_ann_builtin_target, ann_custom_PVCStateRequest);
            CompleteStructMember member_target = TypeObjectUtils::build_complete_struct_member(common_target, detail_target);
            TypeObjectUtils::add_complete_struct_member(member_seq_PVCStateRequest, member_target);
        }
        {
            TypeIdentifierPair type_ids_position;
            ReturnCode_t return_code_position {eprosima::fastdds::dds::RETCODE_OK};
            return_code_position =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_position);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_position)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "position Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_position = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_position = 0x00000001;
            bool common_position_ec {false};
            CommonStructMember common_position {TypeObjectUtils::build_common_struct_member(member_id_position, member_flags_position, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_position, common_position_ec))};
            if (!common_position_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure position member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_position = "position";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_position;
            ann_custom_PVCStateRequest.reset();
            CompleteMemberDetail detail_position = TypeObjectUtils::build_complete_member_detail(name_position, member_ann_builtin_position, ann_custom_PVCStateRequest);
            CompleteStructMember member_position = TypeObjectUtils::build_complete_struct_member(common_position, detail_position);
            TypeObjectUtils::add_complete_struct_member(member_seq_PVCStateRequest, member_position);
        }
        {
            TypeIdentifierPair type_ids_velocity;
            ReturnCode_t return_code_velocity {eprosima::fastdds::dds::RETCODE_OK};
            return_code_velocity =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_velocity);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_velocity)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "velocity Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_velocity = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_velocity = 0x00000002;
            bool common_velocity_ec {false};
            CommonStructMember common_velocity {TypeObjectUtils::build_common_struct_member(member_id_velocity, member_flags_velocity, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_velocity, common_velocity_ec))};
            if (!common_velocity_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure velocity member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_velocity = "velocity";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_velocity;
            ann_custom_PVCStateRequest.reset();
            CompleteMemberDetail detail_velocity = TypeObjectUtils::build_complete_member_detail(name_velocity, member_ann_builtin_velocity, ann_custom_PVCStateRequest);
            CompleteStructMember member_velocity = TypeObjectUtils::build_complete_struct_member(common_velocity, detail_velocity);
            TypeObjectUtils::add_complete_struct_member(member_seq_PVCStateRequest, member_velocity);
        }
        {
            TypeIdentifierPair type_ids_current;
            ReturnCode_t return_code_current {eprosima::fastdds::dds::RETCODE_OK};
            return_code_current =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_current);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_current)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "current Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_current = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_current = 0x00000003;
            bool common_current_ec {false};
            CommonStructMember common_current {TypeObjectUtils::build_common_struct_member(member_id_current, member_flags_current, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_current, common_current_ec))};
            if (!common_current_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure current member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_current = "current";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_current;
            ann_custom_PVCStateRequest.reset();
            CompleteMemberDetail detail_current = TypeObjectUtils::build_complete_member_detail(name_current, member_ann_builtin_current, ann_custom_PVCStateRequest);
            CompleteStructMember member_current = TypeObjectUtils::build_complete_struct_member(common_current, detail_current);
            TypeObjectUtils::add_complete_struct_member(member_seq_PVCStateRequest, member_current);
        }
        CompleteStructType struct_type_PVCStateRequest = TypeObjectUtils::build_complete_struct_type(struct_flags_PVCStateRequest, header_PVCStateRequest, member_seq_PVCStateRequest);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_PVCStateRequest, type_name_PVCStateRequest.to_string(), type_ids_PVCStateRequest))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "RobotSystem::PVCStateRequest already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_PVCStateResponse_type_identifier(
        TypeIdentifierPair& type_ids_PVCStateResponse)
{

    ReturnCode_t return_code_PVCStateResponse {eprosima::fastdds::dds::RETCODE_OK};
    return_code_PVCStateResponse =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RobotSystem::PVCStateResponse", type_ids_PVCStateResponse);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_PVCStateResponse)
    {
        StructTypeFlag struct_flags_PVCStateResponse = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_PVCStateResponse = "RobotSystem::PVCStateResponse";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_PVCStateResponse;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_PVCStateResponse;
        CompleteTypeDetail detail_PVCStateResponse = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_PVCStateResponse, ann_custom_PVCStateResponse, type_name_PVCStateResponse.to_string());
        CompleteStructHeader header_PVCStateResponse;
        header_PVCStateResponse = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_PVCStateResponse);
        CompleteStructMemberSeq member_seq_PVCStateResponse;
        {
            TypeIdentifierPair type_ids_source;
            ReturnCode_t return_code_source {eprosima::fastdds::dds::RETCODE_OK};
            return_code_source =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_source);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_source)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_source))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_source = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_source = 0x00000000;
            bool common_source_ec {false};
            CommonStructMember common_source {TypeObjectUtils::build_common_struct_member(member_id_source, member_flags_source, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_source, common_source_ec))};
            if (!common_source_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure source member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_source = "source";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_source;
            ann_custom_PVCStateResponse.reset();
            CompleteMemberDetail detail_source = TypeObjectUtils::build_complete_member_detail(name_source, member_ann_builtin_source, ann_custom_PVCStateResponse);
            CompleteStructMember member_source = TypeObjectUtils::build_complete_struct_member(common_source, detail_source);
            TypeObjectUtils::add_complete_struct_member(member_seq_PVCStateResponse, member_source);
        }
        {
            TypeIdentifierPair type_ids_timestamp;
            ReturnCode_t return_code_timestamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_timestamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_timestamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_timestamp)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "timestamp Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_timestamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_timestamp = 0x00000001;
            bool common_timestamp_ec {false};
            CommonStructMember common_timestamp {TypeObjectUtils::build_common_struct_member(member_id_timestamp, member_flags_timestamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_timestamp, common_timestamp_ec))};
            if (!common_timestamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure timestamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_timestamp = "timestamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_timestamp;
            ann_custom_PVCStateResponse.reset();
            CompleteMemberDetail detail_timestamp = TypeObjectUtils::build_complete_member_detail(name_timestamp, member_ann_builtin_timestamp, ann_custom_PVCStateResponse);
            CompleteStructMember member_timestamp = TypeObjectUtils::build_complete_struct_member(common_timestamp, detail_timestamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_PVCStateResponse, member_timestamp);
        }
        {
            TypeIdentifierPair type_ids_status;
            ReturnCode_t return_code_status {eprosima::fastdds::dds::RETCODE_OK};
            return_code_status =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_status);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_status)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_status))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_status = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_status = 0x00000002;
            bool common_status_ec {false};
            CommonStructMember common_status {TypeObjectUtils::build_common_struct_member(member_id_status, member_flags_status, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_status, common_status_ec))};
            if (!common_status_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure status member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_status = "status";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_status;
            ann_custom_PVCStateResponse.reset();
            CompleteMemberDetail detail_status = TypeObjectUtils::build_complete_member_detail(name_status, member_ann_builtin_status, ann_custom_PVCStateResponse);
            CompleteStructMember member_status = TypeObjectUtils::build_complete_struct_member(common_status, detail_status);
            TypeObjectUtils::add_complete_struct_member(member_seq_PVCStateResponse, member_status);
        }
        {
            TypeIdentifierPair type_ids_position;
            ReturnCode_t return_code_position {eprosima::fastdds::dds::RETCODE_OK};
            return_code_position =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_position);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_position)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "position Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_position = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_position = 0x00000003;
            bool common_position_ec {false};
            CommonStructMember common_position {TypeObjectUtils::build_common_struct_member(member_id_position, member_flags_position, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_position, common_position_ec))};
            if (!common_position_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure position member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_position = "position";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_position;
            ann_custom_PVCStateResponse.reset();
            CompleteMemberDetail detail_position = TypeObjectUtils::build_complete_member_detail(name_position, member_ann_builtin_position, ann_custom_PVCStateResponse);
            CompleteStructMember member_position = TypeObjectUtils::build_complete_struct_member(common_position, detail_position);
            TypeObjectUtils::add_complete_struct_member(member_seq_PVCStateResponse, member_position);
        }
        {
            TypeIdentifierPair type_ids_velocity;
            ReturnCode_t return_code_velocity {eprosima::fastdds::dds::RETCODE_OK};
            return_code_velocity =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_velocity);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_velocity)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "velocity Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_velocity = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_velocity = 0x00000004;
            bool common_velocity_ec {false};
            CommonStructMember common_velocity {TypeObjectUtils::build_common_struct_member(member_id_velocity, member_flags_velocity, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_velocity, common_velocity_ec))};
            if (!common_velocity_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure velocity member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_velocity = "velocity";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_velocity;
            ann_custom_PVCStateResponse.reset();
            CompleteMemberDetail detail_velocity = TypeObjectUtils::build_complete_member_detail(name_velocity, member_ann_builtin_velocity, ann_custom_PVCStateResponse);
            CompleteStructMember member_velocity = TypeObjectUtils::build_complete_struct_member(common_velocity, detail_velocity);
            TypeObjectUtils::add_complete_struct_member(member_seq_PVCStateResponse, member_velocity);
        }
        {
            TypeIdentifierPair type_ids_current;
            ReturnCode_t return_code_current {eprosima::fastdds::dds::RETCODE_OK};
            return_code_current =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_current);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_current)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "current Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_current = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_current = 0x00000005;
            bool common_current_ec {false};
            CommonStructMember common_current {TypeObjectUtils::build_common_struct_member(member_id_current, member_flags_current, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_current, common_current_ec))};
            if (!common_current_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure current member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_current = "current";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_current;
            ann_custom_PVCStateResponse.reset();
            CompleteMemberDetail detail_current = TypeObjectUtils::build_complete_member_detail(name_current, member_ann_builtin_current, ann_custom_PVCStateResponse);
            CompleteStructMember member_current = TypeObjectUtils::build_complete_struct_member(common_current, detail_current);
            TypeObjectUtils::add_complete_struct_member(member_seq_PVCStateResponse, member_current);
        }
        CompleteStructType struct_type_PVCStateResponse = TypeObjectUtils::build_complete_struct_type(struct_flags_PVCStateResponse, header_PVCStateResponse, member_seq_PVCStateResponse);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_PVCStateResponse, type_name_PVCStateResponse.to_string(), type_ids_PVCStateResponse))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "RobotSystem::PVCStateResponse already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_PositionControlRequest_type_identifier(
        TypeIdentifierPair& type_ids_PositionControlRequest)
{

    ReturnCode_t return_code_PositionControlRequest {eprosima::fastdds::dds::RETCODE_OK};
    return_code_PositionControlRequest =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RobotSystem::PositionControlRequest", type_ids_PositionControlRequest);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_PositionControlRequest)
    {
        StructTypeFlag struct_flags_PositionControlRequest = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_PositionControlRequest = "RobotSystem::PositionControlRequest";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_PositionControlRequest;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_PositionControlRequest;
        CompleteTypeDetail detail_PositionControlRequest = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_PositionControlRequest, ann_custom_PositionControlRequest, type_name_PositionControlRequest.to_string());
        CompleteStructHeader header_PositionControlRequest;
        header_PositionControlRequest = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_PositionControlRequest);
        CompleteStructMemberSeq member_seq_PositionControlRequest;
        {
            TypeIdentifierPair type_ids_target;
            ReturnCode_t return_code_target {eprosima::fastdds::dds::RETCODE_OK};
            return_code_target =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_target);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_target)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_target))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_target = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_target = 0x00000000;
            bool common_target_ec {false};
            CommonStructMember common_target {TypeObjectUtils::build_common_struct_member(member_id_target, member_flags_target, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_target, common_target_ec))};
            if (!common_target_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure target member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_target = "target";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_target;
            ann_custom_PositionControlRequest.reset();
            CompleteMemberDetail detail_target = TypeObjectUtils::build_complete_member_detail(name_target, member_ann_builtin_target, ann_custom_PositionControlRequest);
            CompleteStructMember member_target = TypeObjectUtils::build_complete_struct_member(common_target, detail_target);
            TypeObjectUtils::add_complete_struct_member(member_seq_PositionControlRequest, member_target);
        }
        {
            TypeIdentifierPair type_ids_reply_enable;
            ReturnCode_t return_code_reply_enable {eprosima::fastdds::dds::RETCODE_OK};
            return_code_reply_enable =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_reply_enable);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_reply_enable)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "reply_enable Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_reply_enable = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_reply_enable = 0x00000001;
            bool common_reply_enable_ec {false};
            CommonStructMember common_reply_enable {TypeObjectUtils::build_common_struct_member(member_id_reply_enable, member_flags_reply_enable, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_reply_enable, common_reply_enable_ec))};
            if (!common_reply_enable_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure reply_enable member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_reply_enable = "reply_enable";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_reply_enable;
            ann_custom_PositionControlRequest.reset();
            CompleteMemberDetail detail_reply_enable = TypeObjectUtils::build_complete_member_detail(name_reply_enable, member_ann_builtin_reply_enable, ann_custom_PositionControlRequest);
            CompleteStructMember member_reply_enable = TypeObjectUtils::build_complete_struct_member(common_reply_enable, detail_reply_enable);
            TypeObjectUtils::add_complete_struct_member(member_seq_PositionControlRequest, member_reply_enable);
        }
        {
            TypeIdentifierPair type_ids_position;
            ReturnCode_t return_code_position {eprosima::fastdds::dds::RETCODE_OK};
            return_code_position =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_position);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_position)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "position Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_position = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_position = 0x00000002;
            bool common_position_ec {false};
            CommonStructMember common_position {TypeObjectUtils::build_common_struct_member(member_id_position, member_flags_position, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_position, common_position_ec))};
            if (!common_position_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure position member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_position = "position";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_position;
            ann_custom_PositionControlRequest.reset();
            CompleteMemberDetail detail_position = TypeObjectUtils::build_complete_member_detail(name_position, member_ann_builtin_position, ann_custom_PositionControlRequest);
            CompleteStructMember member_position = TypeObjectUtils::build_complete_struct_member(common_position, detail_position);
            TypeObjectUtils::add_complete_struct_member(member_seq_PositionControlRequest, member_position);
        }
        {
            TypeIdentifierPair type_ids_velocity_ff;
            ReturnCode_t return_code_velocity_ff {eprosima::fastdds::dds::RETCODE_OK};
            return_code_velocity_ff =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_velocity_ff);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_velocity_ff)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "velocity_ff Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_velocity_ff = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_velocity_ff = 0x00000003;
            bool common_velocity_ff_ec {false};
            CommonStructMember common_velocity_ff {TypeObjectUtils::build_common_struct_member(member_id_velocity_ff, member_flags_velocity_ff, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_velocity_ff, common_velocity_ff_ec))};
            if (!common_velocity_ff_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure velocity_ff member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_velocity_ff = "velocity_ff";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_velocity_ff;
            ann_custom_PositionControlRequest.reset();
            CompleteMemberDetail detail_velocity_ff = TypeObjectUtils::build_complete_member_detail(name_velocity_ff, member_ann_builtin_velocity_ff, ann_custom_PositionControlRequest);
            CompleteStructMember member_velocity_ff = TypeObjectUtils::build_complete_struct_member(common_velocity_ff, detail_velocity_ff);
            TypeObjectUtils::add_complete_struct_member(member_seq_PositionControlRequest, member_velocity_ff);
        }
        {
            TypeIdentifierPair type_ids_current_ff;
            ReturnCode_t return_code_current_ff {eprosima::fastdds::dds::RETCODE_OK};
            return_code_current_ff =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_current_ff);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_current_ff)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "current_ff Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_current_ff = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_current_ff = 0x00000004;
            bool common_current_ff_ec {false};
            CommonStructMember common_current_ff {TypeObjectUtils::build_common_struct_member(member_id_current_ff, member_flags_current_ff, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_current_ff, common_current_ff_ec))};
            if (!common_current_ff_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure current_ff member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_current_ff = "current_ff";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_current_ff;
            ann_custom_PositionControlRequest.reset();
            CompleteMemberDetail detail_current_ff = TypeObjectUtils::build_complete_member_detail(name_current_ff, member_ann_builtin_current_ff, ann_custom_PositionControlRequest);
            CompleteStructMember member_current_ff = TypeObjectUtils::build_complete_struct_member(common_current_ff, detail_current_ff);
            TypeObjectUtils::add_complete_struct_member(member_seq_PositionControlRequest, member_current_ff);
        }
        CompleteStructType struct_type_PositionControlRequest = TypeObjectUtils::build_complete_struct_type(struct_flags_PositionControlRequest, header_PositionControlRequest, member_seq_PositionControlRequest);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_PositionControlRequest, type_name_PositionControlRequest.to_string(), type_ids_PositionControlRequest))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "RobotSystem::PositionControlRequest already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_PositionControlResponse_type_identifier(
        TypeIdentifierPair& type_ids_PositionControlResponse)
{

    ReturnCode_t return_code_PositionControlResponse {eprosima::fastdds::dds::RETCODE_OK};
    return_code_PositionControlResponse =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RobotSystem::PositionControlResponse", type_ids_PositionControlResponse);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_PositionControlResponse)
    {
        StructTypeFlag struct_flags_PositionControlResponse = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_PositionControlResponse = "RobotSystem::PositionControlResponse";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_PositionControlResponse;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_PositionControlResponse;
        CompleteTypeDetail detail_PositionControlResponse = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_PositionControlResponse, ann_custom_PositionControlResponse, type_name_PositionControlResponse.to_string());
        CompleteStructHeader header_PositionControlResponse;
        header_PositionControlResponse = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_PositionControlResponse);
        CompleteStructMemberSeq member_seq_PositionControlResponse;
        {
            TypeIdentifierPair type_ids_source;
            ReturnCode_t return_code_source {eprosima::fastdds::dds::RETCODE_OK};
            return_code_source =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_source);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_source)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_source))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_source = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_source = 0x00000000;
            bool common_source_ec {false};
            CommonStructMember common_source {TypeObjectUtils::build_common_struct_member(member_id_source, member_flags_source, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_source, common_source_ec))};
            if (!common_source_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure source member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_source = "source";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_source;
            ann_custom_PositionControlResponse.reset();
            CompleteMemberDetail detail_source = TypeObjectUtils::build_complete_member_detail(name_source, member_ann_builtin_source, ann_custom_PositionControlResponse);
            CompleteStructMember member_source = TypeObjectUtils::build_complete_struct_member(common_source, detail_source);
            TypeObjectUtils::add_complete_struct_member(member_seq_PositionControlResponse, member_source);
        }
        {
            TypeIdentifierPair type_ids_timestamp;
            ReturnCode_t return_code_timestamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_timestamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_timestamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_timestamp)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "timestamp Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_timestamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_timestamp = 0x00000001;
            bool common_timestamp_ec {false};
            CommonStructMember common_timestamp {TypeObjectUtils::build_common_struct_member(member_id_timestamp, member_flags_timestamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_timestamp, common_timestamp_ec))};
            if (!common_timestamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure timestamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_timestamp = "timestamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_timestamp;
            ann_custom_PositionControlResponse.reset();
            CompleteMemberDetail detail_timestamp = TypeObjectUtils::build_complete_member_detail(name_timestamp, member_ann_builtin_timestamp, ann_custom_PositionControlResponse);
            CompleteStructMember member_timestamp = TypeObjectUtils::build_complete_struct_member(common_timestamp, detail_timestamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_PositionControlResponse, member_timestamp);
        }
        {
            TypeIdentifierPair type_ids_status;
            ReturnCode_t return_code_status {eprosima::fastdds::dds::RETCODE_OK};
            return_code_status =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_status);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_status)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_status))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_status = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_status = 0x00000002;
            bool common_status_ec {false};
            CommonStructMember common_status {TypeObjectUtils::build_common_struct_member(member_id_status, member_flags_status, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_status, common_status_ec))};
            if (!common_status_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure status member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_status = "status";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_status;
            ann_custom_PositionControlResponse.reset();
            CompleteMemberDetail detail_status = TypeObjectUtils::build_complete_member_detail(name_status, member_ann_builtin_status, ann_custom_PositionControlResponse);
            CompleteStructMember member_status = TypeObjectUtils::build_complete_struct_member(common_status, detail_status);
            TypeObjectUtils::add_complete_struct_member(member_seq_PositionControlResponse, member_status);
        }
        {
            TypeIdentifierPair type_ids_position;
            ReturnCode_t return_code_position {eprosima::fastdds::dds::RETCODE_OK};
            return_code_position =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_position);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_position)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "position Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_position = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_position = 0x00000003;
            bool common_position_ec {false};
            CommonStructMember common_position {TypeObjectUtils::build_common_struct_member(member_id_position, member_flags_position, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_position, common_position_ec))};
            if (!common_position_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure position member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_position = "position";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_position;
            ann_custom_PositionControlResponse.reset();
            CompleteMemberDetail detail_position = TypeObjectUtils::build_complete_member_detail(name_position, member_ann_builtin_position, ann_custom_PositionControlResponse);
            CompleteStructMember member_position = TypeObjectUtils::build_complete_struct_member(common_position, detail_position);
            TypeObjectUtils::add_complete_struct_member(member_seq_PositionControlResponse, member_position);
        }
        {
            TypeIdentifierPair type_ids_velocity;
            ReturnCode_t return_code_velocity {eprosima::fastdds::dds::RETCODE_OK};
            return_code_velocity =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_velocity);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_velocity)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "velocity Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_velocity = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_velocity = 0x00000004;
            bool common_velocity_ec {false};
            CommonStructMember common_velocity {TypeObjectUtils::build_common_struct_member(member_id_velocity, member_flags_velocity, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_velocity, common_velocity_ec))};
            if (!common_velocity_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure velocity member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_velocity = "velocity";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_velocity;
            ann_custom_PositionControlResponse.reset();
            CompleteMemberDetail detail_velocity = TypeObjectUtils::build_complete_member_detail(name_velocity, member_ann_builtin_velocity, ann_custom_PositionControlResponse);
            CompleteStructMember member_velocity = TypeObjectUtils::build_complete_struct_member(common_velocity, detail_velocity);
            TypeObjectUtils::add_complete_struct_member(member_seq_PositionControlResponse, member_velocity);
        }
        {
            TypeIdentifierPair type_ids_current;
            ReturnCode_t return_code_current {eprosima::fastdds::dds::RETCODE_OK};
            return_code_current =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_current);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_current)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "current Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_current = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_current = 0x00000005;
            bool common_current_ec {false};
            CommonStructMember common_current {TypeObjectUtils::build_common_struct_member(member_id_current, member_flags_current, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_current, common_current_ec))};
            if (!common_current_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure current member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_current = "current";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_current;
            ann_custom_PositionControlResponse.reset();
            CompleteMemberDetail detail_current = TypeObjectUtils::build_complete_member_detail(name_current, member_ann_builtin_current, ann_custom_PositionControlResponse);
            CompleteStructMember member_current = TypeObjectUtils::build_complete_struct_member(common_current, detail_current);
            TypeObjectUtils::add_complete_struct_member(member_seq_PositionControlResponse, member_current);
        }
        {
            TypeIdentifierPair type_ids_current_id;
            ReturnCode_t return_code_current_id {eprosima::fastdds::dds::RETCODE_OK};
            return_code_current_id =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_current_id);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_current_id)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "current_id Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_current_id = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_current_id = 0x00000006;
            bool common_current_id_ec {false};
            CommonStructMember common_current_id {TypeObjectUtils::build_common_struct_member(member_id_current_id, member_flags_current_id, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_current_id, common_current_id_ec))};
            if (!common_current_id_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure current_id member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_current_id = "current_id";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_current_id;
            ann_custom_PositionControlResponse.reset();
            CompleteMemberDetail detail_current_id = TypeObjectUtils::build_complete_member_detail(name_current_id, member_ann_builtin_current_id, ann_custom_PositionControlResponse);
            CompleteStructMember member_current_id = TypeObjectUtils::build_complete_struct_member(common_current_id, detail_current_id);
            TypeObjectUtils::add_complete_struct_member(member_seq_PositionControlResponse, member_current_id);
        }
        CompleteStructType struct_type_PositionControlResponse = TypeObjectUtils::build_complete_struct_type(struct_flags_PositionControlResponse, header_PositionControlResponse, member_seq_PositionControlResponse);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_PositionControlResponse, type_name_PositionControlResponse.to_string(), type_ids_PositionControlResponse))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "RobotSystem::PositionControlResponse already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MotorControlRequest_type_identifier(
        TypeIdentifierPair& type_ids_MotorControlRequest)
{

    ReturnCode_t return_code_MotorControlRequest {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MotorControlRequest =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RobotSystem::MotorControlRequest", type_ids_MotorControlRequest);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MotorControlRequest)
    {
        StructTypeFlag struct_flags_MotorControlRequest = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MotorControlRequest = "RobotSystem::MotorControlRequest";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MotorControlRequest;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MotorControlRequest;
        CompleteTypeDetail detail_MotorControlRequest = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MotorControlRequest, ann_custom_MotorControlRequest, type_name_MotorControlRequest.to_string());
        CompleteStructHeader header_MotorControlRequest;
        header_MotorControlRequest = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MotorControlRequest);
        CompleteStructMemberSeq member_seq_MotorControlRequest;
        {
            TypeIdentifierPair type_ids_target;
            ReturnCode_t return_code_target {eprosima::fastdds::dds::RETCODE_OK};
            return_code_target =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_target);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_target)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_target))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_target = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_target = 0x00000000;
            bool common_target_ec {false};
            CommonStructMember common_target {TypeObjectUtils::build_common_struct_member(member_id_target, member_flags_target, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_target, common_target_ec))};
            if (!common_target_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure target member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_target = "target";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_target;
            ann_custom_MotorControlRequest.reset();
            CompleteMemberDetail detail_target = TypeObjectUtils::build_complete_member_detail(name_target, member_ann_builtin_target, ann_custom_MotorControlRequest);
            CompleteStructMember member_target = TypeObjectUtils::build_complete_struct_member(common_target, detail_target);
            TypeObjectUtils::add_complete_struct_member(member_seq_MotorControlRequest, member_target);
        }
        {
            TypeIdentifierPair type_ids_control_word;
            ReturnCode_t return_code_control_word {eprosima::fastdds::dds::RETCODE_OK};
            return_code_control_word =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_control_word);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_control_word)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "control_word Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_control_word = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_control_word = 0x00000001;
            bool common_control_word_ec {false};
            CommonStructMember common_control_word {TypeObjectUtils::build_common_struct_member(member_id_control_word, member_flags_control_word, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_control_word, common_control_word_ec))};
            if (!common_control_word_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure control_word member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_control_word = "control_word";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_control_word;
            ann_custom_MotorControlRequest.reset();
            CompleteMemberDetail detail_control_word = TypeObjectUtils::build_complete_member_detail(name_control_word, member_ann_builtin_control_word, ann_custom_MotorControlRequest);
            CompleteStructMember member_control_word = TypeObjectUtils::build_complete_struct_member(common_control_word, detail_control_word);
            TypeObjectUtils::add_complete_struct_member(member_seq_MotorControlRequest, member_control_word);
        }
        CompleteStructType struct_type_MotorControlRequest = TypeObjectUtils::build_complete_struct_type(struct_flags_MotorControlRequest, header_MotorControlRequest, member_seq_MotorControlRequest);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MotorControlRequest, type_name_MotorControlRequest.to_string(), type_ids_MotorControlRequest))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "RobotSystem::MotorControlRequest already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MotorControlResponse_type_identifier(
        TypeIdentifierPair& type_ids_MotorControlResponse)
{

    ReturnCode_t return_code_MotorControlResponse {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MotorControlResponse =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RobotSystem::MotorControlResponse", type_ids_MotorControlResponse);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MotorControlResponse)
    {
        StructTypeFlag struct_flags_MotorControlResponse = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MotorControlResponse = "RobotSystem::MotorControlResponse";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MotorControlResponse;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MotorControlResponse;
        CompleteTypeDetail detail_MotorControlResponse = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MotorControlResponse, ann_custom_MotorControlResponse, type_name_MotorControlResponse.to_string());
        CompleteStructHeader header_MotorControlResponse;
        header_MotorControlResponse = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MotorControlResponse);
        CompleteStructMemberSeq member_seq_MotorControlResponse;
        {
            TypeIdentifierPair type_ids_source;
            ReturnCode_t return_code_source {eprosima::fastdds::dds::RETCODE_OK};
            return_code_source =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_source);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_source)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_source))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_source = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_source = 0x00000000;
            bool common_source_ec {false};
            CommonStructMember common_source {TypeObjectUtils::build_common_struct_member(member_id_source, member_flags_source, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_source, common_source_ec))};
            if (!common_source_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure source member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_source = "source";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_source;
            ann_custom_MotorControlResponse.reset();
            CompleteMemberDetail detail_source = TypeObjectUtils::build_complete_member_detail(name_source, member_ann_builtin_source, ann_custom_MotorControlResponse);
            CompleteStructMember member_source = TypeObjectUtils::build_complete_struct_member(common_source, detail_source);
            TypeObjectUtils::add_complete_struct_member(member_seq_MotorControlResponse, member_source);
        }
        {
            TypeIdentifierPair type_ids_timestamp;
            ReturnCode_t return_code_timestamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_timestamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_timestamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_timestamp)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "timestamp Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_timestamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_timestamp = 0x00000001;
            bool common_timestamp_ec {false};
            CommonStructMember common_timestamp {TypeObjectUtils::build_common_struct_member(member_id_timestamp, member_flags_timestamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_timestamp, common_timestamp_ec))};
            if (!common_timestamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure timestamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_timestamp = "timestamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_timestamp;
            ann_custom_MotorControlResponse.reset();
            CompleteMemberDetail detail_timestamp = TypeObjectUtils::build_complete_member_detail(name_timestamp, member_ann_builtin_timestamp, ann_custom_MotorControlResponse);
            CompleteStructMember member_timestamp = TypeObjectUtils::build_complete_struct_member(common_timestamp, detail_timestamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_MotorControlResponse, member_timestamp);
        }
        {
            TypeIdentifierPair type_ids_status;
            ReturnCode_t return_code_status {eprosima::fastdds::dds::RETCODE_OK};
            return_code_status =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_status);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_status)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_status))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_status = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_status = 0x00000002;
            bool common_status_ec {false};
            CommonStructMember common_status {TypeObjectUtils::build_common_struct_member(member_id_status, member_flags_status, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_status, common_status_ec))};
            if (!common_status_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure status member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_status = "status";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_status;
            ann_custom_MotorControlResponse.reset();
            CompleteMemberDetail detail_status = TypeObjectUtils::build_complete_member_detail(name_status, member_ann_builtin_status, ann_custom_MotorControlResponse);
            CompleteStructMember member_status = TypeObjectUtils::build_complete_struct_member(common_status, detail_status);
            TypeObjectUtils::add_complete_struct_member(member_seq_MotorControlResponse, member_status);
        }
        CompleteStructType struct_type_MotorControlResponse = TypeObjectUtils::build_complete_struct_type(struct_flags_MotorControlResponse, header_MotorControlResponse, member_seq_MotorControlResponse);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MotorControlResponse, type_name_MotorControlResponse.to_string(), type_ids_MotorControlResponse))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "RobotSystem::MotorControlResponse already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_OperationModeRequest_type_identifier(
        TypeIdentifierPair& type_ids_OperationModeRequest)
{

    ReturnCode_t return_code_OperationModeRequest {eprosima::fastdds::dds::RETCODE_OK};
    return_code_OperationModeRequest =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RobotSystem::OperationModeRequest", type_ids_OperationModeRequest);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_OperationModeRequest)
    {
        StructTypeFlag struct_flags_OperationModeRequest = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_OperationModeRequest = "RobotSystem::OperationModeRequest";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_OperationModeRequest;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_OperationModeRequest;
        CompleteTypeDetail detail_OperationModeRequest = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_OperationModeRequest, ann_custom_OperationModeRequest, type_name_OperationModeRequest.to_string());
        CompleteStructHeader header_OperationModeRequest;
        header_OperationModeRequest = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_OperationModeRequest);
        CompleteStructMemberSeq member_seq_OperationModeRequest;
        {
            TypeIdentifierPair type_ids_target;
            ReturnCode_t return_code_target {eprosima::fastdds::dds::RETCODE_OK};
            return_code_target =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_target);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_target)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_target))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_target = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_target = 0x00000000;
            bool common_target_ec {false};
            CommonStructMember common_target {TypeObjectUtils::build_common_struct_member(member_id_target, member_flags_target, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_target, common_target_ec))};
            if (!common_target_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure target member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_target = "target";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_target;
            ann_custom_OperationModeRequest.reset();
            CompleteMemberDetail detail_target = TypeObjectUtils::build_complete_member_detail(name_target, member_ann_builtin_target, ann_custom_OperationModeRequest);
            CompleteStructMember member_target = TypeObjectUtils::build_complete_struct_member(common_target, detail_target);
            TypeObjectUtils::add_complete_struct_member(member_seq_OperationModeRequest, member_target);
        }
        {
            TypeIdentifierPair type_ids_mode_of_operation;
            ReturnCode_t return_code_mode_of_operation {eprosima::fastdds::dds::RETCODE_OK};
            return_code_mode_of_operation =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_mode_of_operation);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_mode_of_operation)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "mode_of_operation Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_mode_of_operation = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_mode_of_operation = 0x00000001;
            bool common_mode_of_operation_ec {false};
            CommonStructMember common_mode_of_operation {TypeObjectUtils::build_common_struct_member(member_id_mode_of_operation, member_flags_mode_of_operation, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_mode_of_operation, common_mode_of_operation_ec))};
            if (!common_mode_of_operation_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure mode_of_operation member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_mode_of_operation = "mode_of_operation";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_mode_of_operation;
            ann_custom_OperationModeRequest.reset();
            CompleteMemberDetail detail_mode_of_operation = TypeObjectUtils::build_complete_member_detail(name_mode_of_operation, member_ann_builtin_mode_of_operation, ann_custom_OperationModeRequest);
            CompleteStructMember member_mode_of_operation = TypeObjectUtils::build_complete_struct_member(common_mode_of_operation, detail_mode_of_operation);
            TypeObjectUtils::add_complete_struct_member(member_seq_OperationModeRequest, member_mode_of_operation);
        }
        CompleteStructType struct_type_OperationModeRequest = TypeObjectUtils::build_complete_struct_type(struct_flags_OperationModeRequest, header_OperationModeRequest, member_seq_OperationModeRequest);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_OperationModeRequest, type_name_OperationModeRequest.to_string(), type_ids_OperationModeRequest))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "RobotSystem::OperationModeRequest already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_OperationModeResponse_type_identifier(
        TypeIdentifierPair& type_ids_OperationModeResponse)
{

    ReturnCode_t return_code_OperationModeResponse {eprosima::fastdds::dds::RETCODE_OK};
    return_code_OperationModeResponse =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RobotSystem::OperationModeResponse", type_ids_OperationModeResponse);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_OperationModeResponse)
    {
        StructTypeFlag struct_flags_OperationModeResponse = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_OperationModeResponse = "RobotSystem::OperationModeResponse";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_OperationModeResponse;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_OperationModeResponse;
        CompleteTypeDetail detail_OperationModeResponse = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_OperationModeResponse, ann_custom_OperationModeResponse, type_name_OperationModeResponse.to_string());
        CompleteStructHeader header_OperationModeResponse;
        header_OperationModeResponse = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_OperationModeResponse);
        CompleteStructMemberSeq member_seq_OperationModeResponse;
        {
            TypeIdentifierPair type_ids_source;
            ReturnCode_t return_code_source {eprosima::fastdds::dds::RETCODE_OK};
            return_code_source =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_source);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_source)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_source))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_source = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_source = 0x00000000;
            bool common_source_ec {false};
            CommonStructMember common_source {TypeObjectUtils::build_common_struct_member(member_id_source, member_flags_source, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_source, common_source_ec))};
            if (!common_source_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure source member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_source = "source";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_source;
            ann_custom_OperationModeResponse.reset();
            CompleteMemberDetail detail_source = TypeObjectUtils::build_complete_member_detail(name_source, member_ann_builtin_source, ann_custom_OperationModeResponse);
            CompleteStructMember member_source = TypeObjectUtils::build_complete_struct_member(common_source, detail_source);
            TypeObjectUtils::add_complete_struct_member(member_seq_OperationModeResponse, member_source);
        }
        {
            TypeIdentifierPair type_ids_timestamp;
            ReturnCode_t return_code_timestamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_timestamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_timestamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_timestamp)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "timestamp Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_timestamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_timestamp = 0x00000001;
            bool common_timestamp_ec {false};
            CommonStructMember common_timestamp {TypeObjectUtils::build_common_struct_member(member_id_timestamp, member_flags_timestamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_timestamp, common_timestamp_ec))};
            if (!common_timestamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure timestamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_timestamp = "timestamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_timestamp;
            ann_custom_OperationModeResponse.reset();
            CompleteMemberDetail detail_timestamp = TypeObjectUtils::build_complete_member_detail(name_timestamp, member_ann_builtin_timestamp, ann_custom_OperationModeResponse);
            CompleteStructMember member_timestamp = TypeObjectUtils::build_complete_struct_member(common_timestamp, detail_timestamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_OperationModeResponse, member_timestamp);
        }
        {
            TypeIdentifierPair type_ids_status;
            ReturnCode_t return_code_status {eprosima::fastdds::dds::RETCODE_OK};
            return_code_status =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_status);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_status)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_status))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_status = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_status = 0x00000002;
            bool common_status_ec {false};
            CommonStructMember common_status {TypeObjectUtils::build_common_struct_member(member_id_status, member_flags_status, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_status, common_status_ec))};
            if (!common_status_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure status member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_status = "status";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_status;
            ann_custom_OperationModeResponse.reset();
            CompleteMemberDetail detail_status = TypeObjectUtils::build_complete_member_detail(name_status, member_ann_builtin_status, ann_custom_OperationModeResponse);
            CompleteStructMember member_status = TypeObjectUtils::build_complete_struct_member(common_status, detail_status);
            TypeObjectUtils::add_complete_struct_member(member_seq_OperationModeResponse, member_status);
        }
        CompleteStructType struct_type_OperationModeResponse = TypeObjectUtils::build_complete_struct_type(struct_flags_OperationModeResponse, header_OperationModeResponse, member_seq_OperationModeResponse);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_OperationModeResponse, type_name_OperationModeResponse.to_string(), type_ids_OperationModeResponse))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "RobotSystem::OperationModeResponse already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_IMUStateRequest_type_identifier(
        TypeIdentifierPair& type_ids_IMUStateRequest)
{

    ReturnCode_t return_code_IMUStateRequest {eprosima::fastdds::dds::RETCODE_OK};
    return_code_IMUStateRequest =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RobotSystem::IMUStateRequest", type_ids_IMUStateRequest);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_IMUStateRequest)
    {
        StructTypeFlag struct_flags_IMUStateRequest = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_IMUStateRequest = "RobotSystem::IMUStateRequest";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_IMUStateRequest;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_IMUStateRequest;
        CompleteTypeDetail detail_IMUStateRequest = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_IMUStateRequest, ann_custom_IMUStateRequest, type_name_IMUStateRequest.to_string());
        CompleteStructHeader header_IMUStateRequest;
        header_IMUStateRequest = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_IMUStateRequest);
        CompleteStructMemberSeq member_seq_IMUStateRequest;
        {
            TypeIdentifierPair type_ids_target;
            ReturnCode_t return_code_target {eprosima::fastdds::dds::RETCODE_OK};
            return_code_target =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_target);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_target)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_target))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_target = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_target = 0x00000000;
            bool common_target_ec {false};
            CommonStructMember common_target {TypeObjectUtils::build_common_struct_member(member_id_target, member_flags_target, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_target, common_target_ec))};
            if (!common_target_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure target member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_target = "target";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_target;
            ann_custom_IMUStateRequest.reset();
            CompleteMemberDetail detail_target = TypeObjectUtils::build_complete_member_detail(name_target, member_ann_builtin_target, ann_custom_IMUStateRequest);
            CompleteStructMember member_target = TypeObjectUtils::build_complete_struct_member(common_target, detail_target);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateRequest, member_target);
        }
        CompleteStructType struct_type_IMUStateRequest = TypeObjectUtils::build_complete_struct_type(struct_flags_IMUStateRequest, header_IMUStateRequest, member_seq_IMUStateRequest);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_IMUStateRequest, type_name_IMUStateRequest.to_string(), type_ids_IMUStateRequest))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "RobotSystem::IMUStateRequest already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_IMUStateResponse_type_identifier(
        TypeIdentifierPair& type_ids_IMUStateResponse)
{

    ReturnCode_t return_code_IMUStateResponse {eprosima::fastdds::dds::RETCODE_OK};
    return_code_IMUStateResponse =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RobotSystem::IMUStateResponse", type_ids_IMUStateResponse);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_IMUStateResponse)
    {
        StructTypeFlag struct_flags_IMUStateResponse = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_IMUStateResponse = "RobotSystem::IMUStateResponse";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_IMUStateResponse;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_IMUStateResponse;
        CompleteTypeDetail detail_IMUStateResponse = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_IMUStateResponse, ann_custom_IMUStateResponse, type_name_IMUStateResponse.to_string());
        CompleteStructHeader header_IMUStateResponse;
        header_IMUStateResponse = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_IMUStateResponse);
        CompleteStructMemberSeq member_seq_IMUStateResponse;
        {
            TypeIdentifierPair type_ids_source;
            ReturnCode_t return_code_source {eprosima::fastdds::dds::RETCODE_OK};
            return_code_source =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_source);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_source)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_source))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_source = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_source = 0x00000000;
            bool common_source_ec {false};
            CommonStructMember common_source {TypeObjectUtils::build_common_struct_member(member_id_source, member_flags_source, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_source, common_source_ec))};
            if (!common_source_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure source member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_source = "source";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_source;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_source = TypeObjectUtils::build_complete_member_detail(name_source, member_ann_builtin_source, ann_custom_IMUStateResponse);
            CompleteStructMember member_source = TypeObjectUtils::build_complete_struct_member(common_source, detail_source);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_source);
        }
        {
            TypeIdentifierPair type_ids_timestamp;
            ReturnCode_t return_code_timestamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_timestamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_timestamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_timestamp)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "timestamp Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_timestamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_timestamp = 0x00000001;
            bool common_timestamp_ec {false};
            CommonStructMember common_timestamp {TypeObjectUtils::build_common_struct_member(member_id_timestamp, member_flags_timestamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_timestamp, common_timestamp_ec))};
            if (!common_timestamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure timestamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_timestamp = "timestamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_timestamp;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_timestamp = TypeObjectUtils::build_complete_member_detail(name_timestamp, member_ann_builtin_timestamp, ann_custom_IMUStateResponse);
            CompleteStructMember member_timestamp = TypeObjectUtils::build_complete_struct_member(common_timestamp, detail_timestamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_timestamp);
        }
        {
            TypeIdentifierPair type_ids_status;
            ReturnCode_t return_code_status {eprosima::fastdds::dds::RETCODE_OK};
            return_code_status =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_status);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_status)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_status))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_status = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_status = 0x00000002;
            bool common_status_ec {false};
            CommonStructMember common_status {TypeObjectUtils::build_common_struct_member(member_id_status, member_flags_status, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_status, common_status_ec))};
            if (!common_status_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure status member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_status = "status";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_status;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_status = TypeObjectUtils::build_complete_member_detail(name_status, member_ann_builtin_status, ann_custom_IMUStateResponse);
            CompleteStructMember member_status = TypeObjectUtils::build_complete_struct_member(common_status, detail_status);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_status);
        }
        {
            TypeIdentifierPair type_ids_frame_type;
            ReturnCode_t return_code_frame_type {eprosima::fastdds::dds::RETCODE_OK};
            return_code_frame_type =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_frame_type);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_frame_type)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_frame_type))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_frame_type = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_frame_type = 0x00000003;
            bool common_frame_type_ec {false};
            CommonStructMember common_frame_type {TypeObjectUtils::build_common_struct_member(member_id_frame_type, member_flags_frame_type, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_frame_type, common_frame_type_ec))};
            if (!common_frame_type_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure frame_type member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_frame_type = "frame_type";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_frame_type;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_frame_type = TypeObjectUtils::build_complete_member_detail(name_frame_type, member_ann_builtin_frame_type, ann_custom_IMUStateResponse);
            CompleteStructMember member_frame_type = TypeObjectUtils::build_complete_struct_member(common_frame_type, detail_frame_type);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_frame_type);
        }
        {
            TypeIdentifierPair type_ids_temperature;
            ReturnCode_t return_code_temperature {eprosima::fastdds::dds::RETCODE_OK};
            return_code_temperature =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_temperature);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_temperature)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "temperature Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_temperature = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_temperature = 0x00000004;
            bool common_temperature_ec {false};
            CommonStructMember common_temperature {TypeObjectUtils::build_common_struct_member(member_id_temperature, member_flags_temperature, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_temperature, common_temperature_ec))};
            if (!common_temperature_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure temperature member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_temperature = "temperature";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_temperature;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_temperature = TypeObjectUtils::build_complete_member_detail(name_temperature, member_ann_builtin_temperature, ann_custom_IMUStateResponse);
            CompleteStructMember member_temperature = TypeObjectUtils::build_complete_struct_member(common_temperature, detail_temperature);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_temperature);
        }
        {
            TypeIdentifierPair type_ids_pressure;
            ReturnCode_t return_code_pressure {eprosima::fastdds::dds::RETCODE_OK};
            return_code_pressure =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_pressure);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_pressure)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "pressure Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_pressure = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_pressure = 0x00000005;
            bool common_pressure_ec {false};
            CommonStructMember common_pressure {TypeObjectUtils::build_common_struct_member(member_id_pressure, member_flags_pressure, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_pressure, common_pressure_ec))};
            if (!common_pressure_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure pressure member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_pressure = "pressure";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_pressure;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_pressure = TypeObjectUtils::build_complete_member_detail(name_pressure, member_ann_builtin_pressure, ann_custom_IMUStateResponse);
            CompleteStructMember member_pressure = TypeObjectUtils::build_complete_struct_member(common_pressure, detail_pressure);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_pressure);
        }
        {
            TypeIdentifierPair type_ids_system_time_ms;
            ReturnCode_t return_code_system_time_ms {eprosima::fastdds::dds::RETCODE_OK};
            return_code_system_time_ms =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_system_time_ms);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_system_time_ms)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "system_time_ms Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_system_time_ms = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_system_time_ms = 0x00000006;
            bool common_system_time_ms_ec {false};
            CommonStructMember common_system_time_ms {TypeObjectUtils::build_common_struct_member(member_id_system_time_ms, member_flags_system_time_ms, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_system_time_ms, common_system_time_ms_ec))};
            if (!common_system_time_ms_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure system_time_ms member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_system_time_ms = "system_time_ms";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_system_time_ms;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_system_time_ms = TypeObjectUtils::build_complete_member_detail(name_system_time_ms, member_ann_builtin_system_time_ms, ann_custom_IMUStateResponse);
            CompleteStructMember member_system_time_ms = TypeObjectUtils::build_complete_struct_member(common_system_time_ms, detail_system_time_ms);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_system_time_ms);
        }
        {
            TypeIdentifierPair type_ids_sync_time;
            ReturnCode_t return_code_sync_time {eprosima::fastdds::dds::RETCODE_OK};
            return_code_sync_time =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_sync_time);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_sync_time)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "sync_time Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_sync_time = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_sync_time = 0x00000007;
            bool common_sync_time_ec {false};
            CommonStructMember common_sync_time {TypeObjectUtils::build_common_struct_member(member_id_sync_time, member_flags_sync_time, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_sync_time, common_sync_time_ec))};
            if (!common_sync_time_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure sync_time member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_sync_time = "sync_time";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_sync_time;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_sync_time = TypeObjectUtils::build_complete_member_detail(name_sync_time, member_ann_builtin_sync_time, ann_custom_IMUStateResponse);
            CompleteStructMember member_sync_time = TypeObjectUtils::build_complete_struct_member(common_sync_time, detail_sync_time);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_sync_time);
        }
        {
            TypeIdentifierPair type_ids_roll;
            ReturnCode_t return_code_roll {eprosima::fastdds::dds::RETCODE_OK};
            return_code_roll =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_roll);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_roll)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "roll Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_roll = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_roll = 0x00000008;
            bool common_roll_ec {false};
            CommonStructMember common_roll {TypeObjectUtils::build_common_struct_member(member_id_roll, member_flags_roll, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_roll, common_roll_ec))};
            if (!common_roll_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure roll member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_roll = "roll";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_roll;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_roll = TypeObjectUtils::build_complete_member_detail(name_roll, member_ann_builtin_roll, ann_custom_IMUStateResponse);
            CompleteStructMember member_roll = TypeObjectUtils::build_complete_struct_member(common_roll, detail_roll);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_roll);
        }
        {
            TypeIdentifierPair type_ids_pitch;
            ReturnCode_t return_code_pitch {eprosima::fastdds::dds::RETCODE_OK};
            return_code_pitch =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_pitch);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_pitch)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "pitch Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_pitch = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_pitch = 0x00000009;
            bool common_pitch_ec {false};
            CommonStructMember common_pitch {TypeObjectUtils::build_common_struct_member(member_id_pitch, member_flags_pitch, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_pitch, common_pitch_ec))};
            if (!common_pitch_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure pitch member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_pitch = "pitch";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_pitch;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_pitch = TypeObjectUtils::build_complete_member_detail(name_pitch, member_ann_builtin_pitch, ann_custom_IMUStateResponse);
            CompleteStructMember member_pitch = TypeObjectUtils::build_complete_struct_member(common_pitch, detail_pitch);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_pitch);
        }
        {
            TypeIdentifierPair type_ids_yaw;
            ReturnCode_t return_code_yaw {eprosima::fastdds::dds::RETCODE_OK};
            return_code_yaw =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_yaw);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_yaw)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "yaw Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_yaw = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_yaw = 0x0000000a;
            bool common_yaw_ec {false};
            CommonStructMember common_yaw {TypeObjectUtils::build_common_struct_member(member_id_yaw, member_flags_yaw, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_yaw, common_yaw_ec))};
            if (!common_yaw_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure yaw member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_yaw = "yaw";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_yaw;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_yaw = TypeObjectUtils::build_complete_member_detail(name_yaw, member_ann_builtin_yaw, ann_custom_IMUStateResponse);
            CompleteStructMember member_yaw = TypeObjectUtils::build_complete_struct_member(common_yaw, detail_yaw);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_yaw);
        }
        {
            TypeIdentifierPair type_ids_acceleration_x;
            ReturnCode_t return_code_acceleration_x {eprosima::fastdds::dds::RETCODE_OK};
            return_code_acceleration_x =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_acceleration_x);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_acceleration_x)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "acceleration_x Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_acceleration_x = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_acceleration_x = 0x0000000b;
            bool common_acceleration_x_ec {false};
            CommonStructMember common_acceleration_x {TypeObjectUtils::build_common_struct_member(member_id_acceleration_x, member_flags_acceleration_x, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_acceleration_x, common_acceleration_x_ec))};
            if (!common_acceleration_x_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure acceleration_x member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_acceleration_x = "acceleration_x";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_acceleration_x;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_acceleration_x = TypeObjectUtils::build_complete_member_detail(name_acceleration_x, member_ann_builtin_acceleration_x, ann_custom_IMUStateResponse);
            CompleteStructMember member_acceleration_x = TypeObjectUtils::build_complete_struct_member(common_acceleration_x, detail_acceleration_x);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_acceleration_x);
        }
        {
            TypeIdentifierPair type_ids_acceleration_y;
            ReturnCode_t return_code_acceleration_y {eprosima::fastdds::dds::RETCODE_OK};
            return_code_acceleration_y =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_acceleration_y);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_acceleration_y)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "acceleration_y Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_acceleration_y = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_acceleration_y = 0x0000000c;
            bool common_acceleration_y_ec {false};
            CommonStructMember common_acceleration_y {TypeObjectUtils::build_common_struct_member(member_id_acceleration_y, member_flags_acceleration_y, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_acceleration_y, common_acceleration_y_ec))};
            if (!common_acceleration_y_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure acceleration_y member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_acceleration_y = "acceleration_y";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_acceleration_y;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_acceleration_y = TypeObjectUtils::build_complete_member_detail(name_acceleration_y, member_ann_builtin_acceleration_y, ann_custom_IMUStateResponse);
            CompleteStructMember member_acceleration_y = TypeObjectUtils::build_complete_struct_member(common_acceleration_y, detail_acceleration_y);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_acceleration_y);
        }
        {
            TypeIdentifierPair type_ids_acceleration_z;
            ReturnCode_t return_code_acceleration_z {eprosima::fastdds::dds::RETCODE_OK};
            return_code_acceleration_z =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_acceleration_z);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_acceleration_z)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "acceleration_z Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_acceleration_z = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_acceleration_z = 0x0000000d;
            bool common_acceleration_z_ec {false};
            CommonStructMember common_acceleration_z {TypeObjectUtils::build_common_struct_member(member_id_acceleration_z, member_flags_acceleration_z, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_acceleration_z, common_acceleration_z_ec))};
            if (!common_acceleration_z_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure acceleration_z member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_acceleration_z = "acceleration_z";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_acceleration_z;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_acceleration_z = TypeObjectUtils::build_complete_member_detail(name_acceleration_z, member_ann_builtin_acceleration_z, ann_custom_IMUStateResponse);
            CompleteStructMember member_acceleration_z = TypeObjectUtils::build_complete_struct_member(common_acceleration_z, detail_acceleration_z);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_acceleration_z);
        }
        {
            TypeIdentifierPair type_ids_gyroscope_x;
            ReturnCode_t return_code_gyroscope_x {eprosima::fastdds::dds::RETCODE_OK};
            return_code_gyroscope_x =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_gyroscope_x);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_gyroscope_x)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "gyroscope_x Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_gyroscope_x = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_gyroscope_x = 0x0000000e;
            bool common_gyroscope_x_ec {false};
            CommonStructMember common_gyroscope_x {TypeObjectUtils::build_common_struct_member(member_id_gyroscope_x, member_flags_gyroscope_x, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_gyroscope_x, common_gyroscope_x_ec))};
            if (!common_gyroscope_x_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure gyroscope_x member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_gyroscope_x = "gyroscope_x";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_gyroscope_x;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_gyroscope_x = TypeObjectUtils::build_complete_member_detail(name_gyroscope_x, member_ann_builtin_gyroscope_x, ann_custom_IMUStateResponse);
            CompleteStructMember member_gyroscope_x = TypeObjectUtils::build_complete_struct_member(common_gyroscope_x, detail_gyroscope_x);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_gyroscope_x);
        }
        {
            TypeIdentifierPair type_ids_gyroscope_y;
            ReturnCode_t return_code_gyroscope_y {eprosima::fastdds::dds::RETCODE_OK};
            return_code_gyroscope_y =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_gyroscope_y);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_gyroscope_y)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "gyroscope_y Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_gyroscope_y = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_gyroscope_y = 0x0000000f;
            bool common_gyroscope_y_ec {false};
            CommonStructMember common_gyroscope_y {TypeObjectUtils::build_common_struct_member(member_id_gyroscope_y, member_flags_gyroscope_y, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_gyroscope_y, common_gyroscope_y_ec))};
            if (!common_gyroscope_y_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure gyroscope_y member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_gyroscope_y = "gyroscope_y";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_gyroscope_y;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_gyroscope_y = TypeObjectUtils::build_complete_member_detail(name_gyroscope_y, member_ann_builtin_gyroscope_y, ann_custom_IMUStateResponse);
            CompleteStructMember member_gyroscope_y = TypeObjectUtils::build_complete_struct_member(common_gyroscope_y, detail_gyroscope_y);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_gyroscope_y);
        }
        {
            TypeIdentifierPair type_ids_gyroscope_z;
            ReturnCode_t return_code_gyroscope_z {eprosima::fastdds::dds::RETCODE_OK};
            return_code_gyroscope_z =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_gyroscope_z);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_gyroscope_z)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "gyroscope_z Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_gyroscope_z = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_gyroscope_z = 0x00000010;
            bool common_gyroscope_z_ec {false};
            CommonStructMember common_gyroscope_z {TypeObjectUtils::build_common_struct_member(member_id_gyroscope_z, member_flags_gyroscope_z, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_gyroscope_z, common_gyroscope_z_ec))};
            if (!common_gyroscope_z_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure gyroscope_z member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_gyroscope_z = "gyroscope_z";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_gyroscope_z;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_gyroscope_z = TypeObjectUtils::build_complete_member_detail(name_gyroscope_z, member_ann_builtin_gyroscope_z, ann_custom_IMUStateResponse);
            CompleteStructMember member_gyroscope_z = TypeObjectUtils::build_complete_struct_member(common_gyroscope_z, detail_gyroscope_z);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_gyroscope_z);
        }
        {
            TypeIdentifierPair type_ids_magnetometer_x;
            ReturnCode_t return_code_magnetometer_x {eprosima::fastdds::dds::RETCODE_OK};
            return_code_magnetometer_x =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_magnetometer_x);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_magnetometer_x)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "magnetometer_x Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_magnetometer_x = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_magnetometer_x = 0x00000011;
            bool common_magnetometer_x_ec {false};
            CommonStructMember common_magnetometer_x {TypeObjectUtils::build_common_struct_member(member_id_magnetometer_x, member_flags_magnetometer_x, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_magnetometer_x, common_magnetometer_x_ec))};
            if (!common_magnetometer_x_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure magnetometer_x member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_magnetometer_x = "magnetometer_x";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_magnetometer_x;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_magnetometer_x = TypeObjectUtils::build_complete_member_detail(name_magnetometer_x, member_ann_builtin_magnetometer_x, ann_custom_IMUStateResponse);
            CompleteStructMember member_magnetometer_x = TypeObjectUtils::build_complete_struct_member(common_magnetometer_x, detail_magnetometer_x);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_magnetometer_x);
        }
        {
            TypeIdentifierPair type_ids_magnetometer_y;
            ReturnCode_t return_code_magnetometer_y {eprosima::fastdds::dds::RETCODE_OK};
            return_code_magnetometer_y =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_magnetometer_y);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_magnetometer_y)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "magnetometer_y Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_magnetometer_y = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_magnetometer_y = 0x00000012;
            bool common_magnetometer_y_ec {false};
            CommonStructMember common_magnetometer_y {TypeObjectUtils::build_common_struct_member(member_id_magnetometer_y, member_flags_magnetometer_y, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_magnetometer_y, common_magnetometer_y_ec))};
            if (!common_magnetometer_y_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure magnetometer_y member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_magnetometer_y = "magnetometer_y";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_magnetometer_y;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_magnetometer_y = TypeObjectUtils::build_complete_member_detail(name_magnetometer_y, member_ann_builtin_magnetometer_y, ann_custom_IMUStateResponse);
            CompleteStructMember member_magnetometer_y = TypeObjectUtils::build_complete_struct_member(common_magnetometer_y, detail_magnetometer_y);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_magnetometer_y);
        }
        {
            TypeIdentifierPair type_ids_magnetometer_z;
            ReturnCode_t return_code_magnetometer_z {eprosima::fastdds::dds::RETCODE_OK};
            return_code_magnetometer_z =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_magnetometer_z);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_magnetometer_z)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "magnetometer_z Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_magnetometer_z = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_magnetometer_z = 0x00000013;
            bool common_magnetometer_z_ec {false};
            CommonStructMember common_magnetometer_z {TypeObjectUtils::build_common_struct_member(member_id_magnetometer_z, member_flags_magnetometer_z, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_magnetometer_z, common_magnetometer_z_ec))};
            if (!common_magnetometer_z_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure magnetometer_z member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_magnetometer_z = "magnetometer_z";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_magnetometer_z;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_magnetometer_z = TypeObjectUtils::build_complete_member_detail(name_magnetometer_z, member_ann_builtin_magnetometer_z, ann_custom_IMUStateResponse);
            CompleteStructMember member_magnetometer_z = TypeObjectUtils::build_complete_struct_member(common_magnetometer_z, detail_magnetometer_z);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_magnetometer_z);
        }
        {
            TypeIdentifierPair type_ids_quaternion_x;
            ReturnCode_t return_code_quaternion_x {eprosima::fastdds::dds::RETCODE_OK};
            return_code_quaternion_x =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_quaternion_x);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_quaternion_x)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "quaternion_x Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_quaternion_x = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_quaternion_x = 0x00000014;
            bool common_quaternion_x_ec {false};
            CommonStructMember common_quaternion_x {TypeObjectUtils::build_common_struct_member(member_id_quaternion_x, member_flags_quaternion_x, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_quaternion_x, common_quaternion_x_ec))};
            if (!common_quaternion_x_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure quaternion_x member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_quaternion_x = "quaternion_x";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_quaternion_x;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_quaternion_x = TypeObjectUtils::build_complete_member_detail(name_quaternion_x, member_ann_builtin_quaternion_x, ann_custom_IMUStateResponse);
            CompleteStructMember member_quaternion_x = TypeObjectUtils::build_complete_struct_member(common_quaternion_x, detail_quaternion_x);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_quaternion_x);
        }
        {
            TypeIdentifierPair type_ids_quaternion_y;
            ReturnCode_t return_code_quaternion_y {eprosima::fastdds::dds::RETCODE_OK};
            return_code_quaternion_y =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_quaternion_y);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_quaternion_y)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "quaternion_y Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_quaternion_y = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_quaternion_y = 0x00000015;
            bool common_quaternion_y_ec {false};
            CommonStructMember common_quaternion_y {TypeObjectUtils::build_common_struct_member(member_id_quaternion_y, member_flags_quaternion_y, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_quaternion_y, common_quaternion_y_ec))};
            if (!common_quaternion_y_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure quaternion_y member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_quaternion_y = "quaternion_y";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_quaternion_y;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_quaternion_y = TypeObjectUtils::build_complete_member_detail(name_quaternion_y, member_ann_builtin_quaternion_y, ann_custom_IMUStateResponse);
            CompleteStructMember member_quaternion_y = TypeObjectUtils::build_complete_struct_member(common_quaternion_y, detail_quaternion_y);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_quaternion_y);
        }
        {
            TypeIdentifierPair type_ids_quaternion_z;
            ReturnCode_t return_code_quaternion_z {eprosima::fastdds::dds::RETCODE_OK};
            return_code_quaternion_z =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_quaternion_z);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_quaternion_z)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "quaternion_z Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_quaternion_z = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_quaternion_z = 0x00000016;
            bool common_quaternion_z_ec {false};
            CommonStructMember common_quaternion_z {TypeObjectUtils::build_common_struct_member(member_id_quaternion_z, member_flags_quaternion_z, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_quaternion_z, common_quaternion_z_ec))};
            if (!common_quaternion_z_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure quaternion_z member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_quaternion_z = "quaternion_z";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_quaternion_z;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_quaternion_z = TypeObjectUtils::build_complete_member_detail(name_quaternion_z, member_ann_builtin_quaternion_z, ann_custom_IMUStateResponse);
            CompleteStructMember member_quaternion_z = TypeObjectUtils::build_complete_struct_member(common_quaternion_z, detail_quaternion_z);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_quaternion_z);
        }
        {
            TypeIdentifierPair type_ids_quaternion_w;
            ReturnCode_t return_code_quaternion_w {eprosima::fastdds::dds::RETCODE_OK};
            return_code_quaternion_w =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_quaternion_w);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_quaternion_w)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "quaternion_w Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_quaternion_w = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_quaternion_w = 0x00000017;
            bool common_quaternion_w_ec {false};
            CommonStructMember common_quaternion_w {TypeObjectUtils::build_common_struct_member(member_id_quaternion_w, member_flags_quaternion_w, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_quaternion_w, common_quaternion_w_ec))};
            if (!common_quaternion_w_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure quaternion_w member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_quaternion_w = "quaternion_w";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_quaternion_w;
            ann_custom_IMUStateResponse.reset();
            CompleteMemberDetail detail_quaternion_w = TypeObjectUtils::build_complete_member_detail(name_quaternion_w, member_ann_builtin_quaternion_w, ann_custom_IMUStateResponse);
            CompleteStructMember member_quaternion_w = TypeObjectUtils::build_complete_struct_member(common_quaternion_w, detail_quaternion_w);
            TypeObjectUtils::add_complete_struct_member(member_seq_IMUStateResponse, member_quaternion_w);
        }
        CompleteStructType struct_type_IMUStateResponse = TypeObjectUtils::build_complete_struct_type(struct_flags_IMUStateResponse, header_IMUStateResponse, member_seq_IMUStateResponse);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_IMUStateResponse, type_name_IMUStateResponse.to_string(), type_ids_IMUStateResponse))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "RobotSystem::IMUStateResponse already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_PIDIMMGetRequest_type_identifier(
        TypeIdentifierPair& type_ids_PIDIMMGetRequest)
{

    ReturnCode_t return_code_PIDIMMGetRequest {eprosima::fastdds::dds::RETCODE_OK};
    return_code_PIDIMMGetRequest =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RobotSystem::PIDIMMGetRequest", type_ids_PIDIMMGetRequest);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_PIDIMMGetRequest)
    {
        StructTypeFlag struct_flags_PIDIMMGetRequest = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_PIDIMMGetRequest = "RobotSystem::PIDIMMGetRequest";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_PIDIMMGetRequest;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_PIDIMMGetRequest;
        CompleteTypeDetail detail_PIDIMMGetRequest = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_PIDIMMGetRequest, ann_custom_PIDIMMGetRequest, type_name_PIDIMMGetRequest.to_string());
        CompleteStructHeader header_PIDIMMGetRequest;
        header_PIDIMMGetRequest = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_PIDIMMGetRequest);
        CompleteStructMemberSeq member_seq_PIDIMMGetRequest;
        {
            TypeIdentifierPair type_ids_target;
            ReturnCode_t return_code_target {eprosima::fastdds::dds::RETCODE_OK};
            return_code_target =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_target);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_target)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_target))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_target = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_target = 0x00000000;
            bool common_target_ec {false};
            CommonStructMember common_target {TypeObjectUtils::build_common_struct_member(member_id_target, member_flags_target, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_target, common_target_ec))};
            if (!common_target_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure target member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_target = "target";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_target;
            ann_custom_PIDIMMGetRequest.reset();
            CompleteMemberDetail detail_target = TypeObjectUtils::build_complete_member_detail(name_target, member_ann_builtin_target, ann_custom_PIDIMMGetRequest);
            CompleteStructMember member_target = TypeObjectUtils::build_complete_struct_member(common_target, detail_target);
            TypeObjectUtils::add_complete_struct_member(member_seq_PIDIMMGetRequest, member_target);
        }
        CompleteStructType struct_type_PIDIMMGetRequest = TypeObjectUtils::build_complete_struct_type(struct_flags_PIDIMMGetRequest, header_PIDIMMGetRequest, member_seq_PIDIMMGetRequest);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_PIDIMMGetRequest, type_name_PIDIMMGetRequest.to_string(), type_ids_PIDIMMGetRequest))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "RobotSystem::PIDIMMGetRequest already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_PIDIMMGetResponse_type_identifier(
        TypeIdentifierPair& type_ids_PIDIMMGetResponse)
{

    ReturnCode_t return_code_PIDIMMGetResponse {eprosima::fastdds::dds::RETCODE_OK};
    return_code_PIDIMMGetResponse =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RobotSystem::PIDIMMGetResponse", type_ids_PIDIMMGetResponse);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_PIDIMMGetResponse)
    {
        StructTypeFlag struct_flags_PIDIMMGetResponse = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_PIDIMMGetResponse = "RobotSystem::PIDIMMGetResponse";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_PIDIMMGetResponse;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_PIDIMMGetResponse;
        CompleteTypeDetail detail_PIDIMMGetResponse = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_PIDIMMGetResponse, ann_custom_PIDIMMGetResponse, type_name_PIDIMMGetResponse.to_string());
        CompleteStructHeader header_PIDIMMGetResponse;
        header_PIDIMMGetResponse = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_PIDIMMGetResponse);
        CompleteStructMemberSeq member_seq_PIDIMMGetResponse;
        {
            TypeIdentifierPair type_ids_source;
            ReturnCode_t return_code_source {eprosima::fastdds::dds::RETCODE_OK};
            return_code_source =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_source);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_source)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_source))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_source = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_source = 0x00000000;
            bool common_source_ec {false};
            CommonStructMember common_source {TypeObjectUtils::build_common_struct_member(member_id_source, member_flags_source, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_source, common_source_ec))};
            if (!common_source_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure source member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_source = "source";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_source;
            ann_custom_PIDIMMGetResponse.reset();
            CompleteMemberDetail detail_source = TypeObjectUtils::build_complete_member_detail(name_source, member_ann_builtin_source, ann_custom_PIDIMMGetResponse);
            CompleteStructMember member_source = TypeObjectUtils::build_complete_struct_member(common_source, detail_source);
            TypeObjectUtils::add_complete_struct_member(member_seq_PIDIMMGetResponse, member_source);
        }
        {
            TypeIdentifierPair type_ids_timestamp;
            ReturnCode_t return_code_timestamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_timestamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_timestamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_timestamp)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "timestamp Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_timestamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_timestamp = 0x00000001;
            bool common_timestamp_ec {false};
            CommonStructMember common_timestamp {TypeObjectUtils::build_common_struct_member(member_id_timestamp, member_flags_timestamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_timestamp, common_timestamp_ec))};
            if (!common_timestamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure timestamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_timestamp = "timestamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_timestamp;
            ann_custom_PIDIMMGetResponse.reset();
            CompleteMemberDetail detail_timestamp = TypeObjectUtils::build_complete_member_detail(name_timestamp, member_ann_builtin_timestamp, ann_custom_PIDIMMGetResponse);
            CompleteStructMember member_timestamp = TypeObjectUtils::build_complete_struct_member(common_timestamp, detail_timestamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_PIDIMMGetResponse, member_timestamp);
        }
        {
            TypeIdentifierPair type_ids_status;
            ReturnCode_t return_code_status {eprosima::fastdds::dds::RETCODE_OK};
            return_code_status =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_status);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_status)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_status))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_status = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_status = 0x00000002;
            bool common_status_ec {false};
            CommonStructMember common_status {TypeObjectUtils::build_common_struct_member(member_id_status, member_flags_status, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_status, common_status_ec))};
            if (!common_status_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure status member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_status = "status";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_status;
            ann_custom_PIDIMMGetResponse.reset();
            CompleteMemberDetail detail_status = TypeObjectUtils::build_complete_member_detail(name_status, member_ann_builtin_status, ann_custom_PIDIMMGetResponse);
            CompleteStructMember member_status = TypeObjectUtils::build_complete_struct_member(common_status, detail_status);
            TypeObjectUtils::add_complete_struct_member(member_seq_PIDIMMGetResponse, member_status);
        }
        {
            TypeIdentifierPair type_ids_control_position_kp_imm;
            ReturnCode_t return_code_control_position_kp_imm {eprosima::fastdds::dds::RETCODE_OK};
            return_code_control_position_kp_imm =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_control_position_kp_imm);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_control_position_kp_imm)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "control_position_kp_imm Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_control_position_kp_imm = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_control_position_kp_imm = 0x00000003;
            bool common_control_position_kp_imm_ec {false};
            CommonStructMember common_control_position_kp_imm {TypeObjectUtils::build_common_struct_member(member_id_control_position_kp_imm, member_flags_control_position_kp_imm, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_control_position_kp_imm, common_control_position_kp_imm_ec))};
            if (!common_control_position_kp_imm_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure control_position_kp_imm member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_control_position_kp_imm = "control_position_kp_imm";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_control_position_kp_imm;
            ann_custom_PIDIMMGetResponse.reset();
            CompleteMemberDetail detail_control_position_kp_imm = TypeObjectUtils::build_complete_member_detail(name_control_position_kp_imm, member_ann_builtin_control_position_kp_imm, ann_custom_PIDIMMGetResponse);
            CompleteStructMember member_control_position_kp_imm = TypeObjectUtils::build_complete_struct_member(common_control_position_kp_imm, detail_control_position_kp_imm);
            TypeObjectUtils::add_complete_struct_member(member_seq_PIDIMMGetResponse, member_control_position_kp_imm);
        }
        {
            TypeIdentifierPair type_ids_control_velocity_kp_imm;
            ReturnCode_t return_code_control_velocity_kp_imm {eprosima::fastdds::dds::RETCODE_OK};
            return_code_control_velocity_kp_imm =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_control_velocity_kp_imm);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_control_velocity_kp_imm)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "control_velocity_kp_imm Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_control_velocity_kp_imm = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_control_velocity_kp_imm = 0x00000004;
            bool common_control_velocity_kp_imm_ec {false};
            CommonStructMember common_control_velocity_kp_imm {TypeObjectUtils::build_common_struct_member(member_id_control_velocity_kp_imm, member_flags_control_velocity_kp_imm, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_control_velocity_kp_imm, common_control_velocity_kp_imm_ec))};
            if (!common_control_velocity_kp_imm_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure control_velocity_kp_imm member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_control_velocity_kp_imm = "control_velocity_kp_imm";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_control_velocity_kp_imm;
            ann_custom_PIDIMMGetResponse.reset();
            CompleteMemberDetail detail_control_velocity_kp_imm = TypeObjectUtils::build_complete_member_detail(name_control_velocity_kp_imm, member_ann_builtin_control_velocity_kp_imm, ann_custom_PIDIMMGetResponse);
            CompleteStructMember member_control_velocity_kp_imm = TypeObjectUtils::build_complete_struct_member(common_control_velocity_kp_imm, detail_control_velocity_kp_imm);
            TypeObjectUtils::add_complete_struct_member(member_seq_PIDIMMGetResponse, member_control_velocity_kp_imm);
        }
        {
            TypeIdentifierPair type_ids_control_velocity_ki_imm;
            ReturnCode_t return_code_control_velocity_ki_imm {eprosima::fastdds::dds::RETCODE_OK};
            return_code_control_velocity_ki_imm =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_control_velocity_ki_imm);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_control_velocity_ki_imm)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "control_velocity_ki_imm Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_control_velocity_ki_imm = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_control_velocity_ki_imm = 0x00000005;
            bool common_control_velocity_ki_imm_ec {false};
            CommonStructMember common_control_velocity_ki_imm {TypeObjectUtils::build_common_struct_member(member_id_control_velocity_ki_imm, member_flags_control_velocity_ki_imm, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_control_velocity_ki_imm, common_control_velocity_ki_imm_ec))};
            if (!common_control_velocity_ki_imm_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure control_velocity_ki_imm member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_control_velocity_ki_imm = "control_velocity_ki_imm";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_control_velocity_ki_imm;
            ann_custom_PIDIMMGetResponse.reset();
            CompleteMemberDetail detail_control_velocity_ki_imm = TypeObjectUtils::build_complete_member_detail(name_control_velocity_ki_imm, member_ann_builtin_control_velocity_ki_imm, ann_custom_PIDIMMGetResponse);
            CompleteStructMember member_control_velocity_ki_imm = TypeObjectUtils::build_complete_struct_member(common_control_velocity_ki_imm, detail_control_velocity_ki_imm);
            TypeObjectUtils::add_complete_struct_member(member_seq_PIDIMMGetResponse, member_control_velocity_ki_imm);
        }
        {
            TypeIdentifierPair type_ids_control_current_kp_imm;
            ReturnCode_t return_code_control_current_kp_imm {eprosima::fastdds::dds::RETCODE_OK};
            return_code_control_current_kp_imm =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_control_current_kp_imm);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_control_current_kp_imm)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "control_current_kp_imm Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_control_current_kp_imm = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_control_current_kp_imm = 0x00000006;
            bool common_control_current_kp_imm_ec {false};
            CommonStructMember common_control_current_kp_imm {TypeObjectUtils::build_common_struct_member(member_id_control_current_kp_imm, member_flags_control_current_kp_imm, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_control_current_kp_imm, common_control_current_kp_imm_ec))};
            if (!common_control_current_kp_imm_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure control_current_kp_imm member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_control_current_kp_imm = "control_current_kp_imm";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_control_current_kp_imm;
            ann_custom_PIDIMMGetResponse.reset();
            CompleteMemberDetail detail_control_current_kp_imm = TypeObjectUtils::build_complete_member_detail(name_control_current_kp_imm, member_ann_builtin_control_current_kp_imm, ann_custom_PIDIMMGetResponse);
            CompleteStructMember member_control_current_kp_imm = TypeObjectUtils::build_complete_struct_member(common_control_current_kp_imm, detail_control_current_kp_imm);
            TypeObjectUtils::add_complete_struct_member(member_seq_PIDIMMGetResponse, member_control_current_kp_imm);
        }
        {
            TypeIdentifierPair type_ids_control_current_ki_imm;
            ReturnCode_t return_code_control_current_ki_imm {eprosima::fastdds::dds::RETCODE_OK};
            return_code_control_current_ki_imm =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_control_current_ki_imm);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_control_current_ki_imm)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "control_current_ki_imm Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_control_current_ki_imm = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_control_current_ki_imm = 0x00000007;
            bool common_control_current_ki_imm_ec {false};
            CommonStructMember common_control_current_ki_imm {TypeObjectUtils::build_common_struct_member(member_id_control_current_ki_imm, member_flags_control_current_ki_imm, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_control_current_ki_imm, common_control_current_ki_imm_ec))};
            if (!common_control_current_ki_imm_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure control_current_ki_imm member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_control_current_ki_imm = "control_current_ki_imm";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_control_current_ki_imm;
            ann_custom_PIDIMMGetResponse.reset();
            CompleteMemberDetail detail_control_current_ki_imm = TypeObjectUtils::build_complete_member_detail(name_control_current_ki_imm, member_ann_builtin_control_current_ki_imm, ann_custom_PIDIMMGetResponse);
            CompleteStructMember member_control_current_ki_imm = TypeObjectUtils::build_complete_struct_member(common_control_current_ki_imm, detail_control_current_ki_imm);
            TypeObjectUtils::add_complete_struct_member(member_seq_PIDIMMGetResponse, member_control_current_ki_imm);
        }
        CompleteStructType struct_type_PIDIMMGetResponse = TypeObjectUtils::build_complete_struct_type(struct_flags_PIDIMMGetResponse, header_PIDIMMGetResponse, member_seq_PIDIMMGetResponse);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_PIDIMMGetResponse, type_name_PIDIMMGetResponse.to_string(), type_ids_PIDIMMGetResponse))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "RobotSystem::PIDIMMGetResponse already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_PIDIMMSetRequest_type_identifier(
        TypeIdentifierPair& type_ids_PIDIMMSetRequest)
{

    ReturnCode_t return_code_PIDIMMSetRequest {eprosima::fastdds::dds::RETCODE_OK};
    return_code_PIDIMMSetRequest =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RobotSystem::PIDIMMSetRequest", type_ids_PIDIMMSetRequest);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_PIDIMMSetRequest)
    {
        StructTypeFlag struct_flags_PIDIMMSetRequest = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_PIDIMMSetRequest = "RobotSystem::PIDIMMSetRequest";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_PIDIMMSetRequest;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_PIDIMMSetRequest;
        CompleteTypeDetail detail_PIDIMMSetRequest = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_PIDIMMSetRequest, ann_custom_PIDIMMSetRequest, type_name_PIDIMMSetRequest.to_string());
        CompleteStructHeader header_PIDIMMSetRequest;
        header_PIDIMMSetRequest = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_PIDIMMSetRequest);
        CompleteStructMemberSeq member_seq_PIDIMMSetRequest;
        {
            TypeIdentifierPair type_ids_target;
            ReturnCode_t return_code_target {eprosima::fastdds::dds::RETCODE_OK};
            return_code_target =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_target);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_target)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_target))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_target = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_target = 0x00000000;
            bool common_target_ec {false};
            CommonStructMember common_target {TypeObjectUtils::build_common_struct_member(member_id_target, member_flags_target, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_target, common_target_ec))};
            if (!common_target_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure target member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_target = "target";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_target;
            ann_custom_PIDIMMSetRequest.reset();
            CompleteMemberDetail detail_target = TypeObjectUtils::build_complete_member_detail(name_target, member_ann_builtin_target, ann_custom_PIDIMMSetRequest);
            CompleteStructMember member_target = TypeObjectUtils::build_complete_struct_member(common_target, detail_target);
            TypeObjectUtils::add_complete_struct_member(member_seq_PIDIMMSetRequest, member_target);
        }
        {
            TypeIdentifierPair type_ids_control_position_kp_imm;
            ReturnCode_t return_code_control_position_kp_imm {eprosima::fastdds::dds::RETCODE_OK};
            return_code_control_position_kp_imm =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_control_position_kp_imm);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_control_position_kp_imm)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "control_position_kp_imm Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_control_position_kp_imm = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_control_position_kp_imm = 0x00000001;
            bool common_control_position_kp_imm_ec {false};
            CommonStructMember common_control_position_kp_imm {TypeObjectUtils::build_common_struct_member(member_id_control_position_kp_imm, member_flags_control_position_kp_imm, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_control_position_kp_imm, common_control_position_kp_imm_ec))};
            if (!common_control_position_kp_imm_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure control_position_kp_imm member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_control_position_kp_imm = "control_position_kp_imm";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_control_position_kp_imm;
            ann_custom_PIDIMMSetRequest.reset();
            CompleteMemberDetail detail_control_position_kp_imm = TypeObjectUtils::build_complete_member_detail(name_control_position_kp_imm, member_ann_builtin_control_position_kp_imm, ann_custom_PIDIMMSetRequest);
            CompleteStructMember member_control_position_kp_imm = TypeObjectUtils::build_complete_struct_member(common_control_position_kp_imm, detail_control_position_kp_imm);
            TypeObjectUtils::add_complete_struct_member(member_seq_PIDIMMSetRequest, member_control_position_kp_imm);
        }
        {
            TypeIdentifierPair type_ids_control_velocity_kp_imm;
            ReturnCode_t return_code_control_velocity_kp_imm {eprosima::fastdds::dds::RETCODE_OK};
            return_code_control_velocity_kp_imm =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_control_velocity_kp_imm);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_control_velocity_kp_imm)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "control_velocity_kp_imm Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_control_velocity_kp_imm = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_control_velocity_kp_imm = 0x00000002;
            bool common_control_velocity_kp_imm_ec {false};
            CommonStructMember common_control_velocity_kp_imm {TypeObjectUtils::build_common_struct_member(member_id_control_velocity_kp_imm, member_flags_control_velocity_kp_imm, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_control_velocity_kp_imm, common_control_velocity_kp_imm_ec))};
            if (!common_control_velocity_kp_imm_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure control_velocity_kp_imm member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_control_velocity_kp_imm = "control_velocity_kp_imm";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_control_velocity_kp_imm;
            ann_custom_PIDIMMSetRequest.reset();
            CompleteMemberDetail detail_control_velocity_kp_imm = TypeObjectUtils::build_complete_member_detail(name_control_velocity_kp_imm, member_ann_builtin_control_velocity_kp_imm, ann_custom_PIDIMMSetRequest);
            CompleteStructMember member_control_velocity_kp_imm = TypeObjectUtils::build_complete_struct_member(common_control_velocity_kp_imm, detail_control_velocity_kp_imm);
            TypeObjectUtils::add_complete_struct_member(member_seq_PIDIMMSetRequest, member_control_velocity_kp_imm);
        }
        {
            TypeIdentifierPair type_ids_control_velocity_ki_imm;
            ReturnCode_t return_code_control_velocity_ki_imm {eprosima::fastdds::dds::RETCODE_OK};
            return_code_control_velocity_ki_imm =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_control_velocity_ki_imm);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_control_velocity_ki_imm)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "control_velocity_ki_imm Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_control_velocity_ki_imm = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_control_velocity_ki_imm = 0x00000003;
            bool common_control_velocity_ki_imm_ec {false};
            CommonStructMember common_control_velocity_ki_imm {TypeObjectUtils::build_common_struct_member(member_id_control_velocity_ki_imm, member_flags_control_velocity_ki_imm, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_control_velocity_ki_imm, common_control_velocity_ki_imm_ec))};
            if (!common_control_velocity_ki_imm_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure control_velocity_ki_imm member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_control_velocity_ki_imm = "control_velocity_ki_imm";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_control_velocity_ki_imm;
            ann_custom_PIDIMMSetRequest.reset();
            CompleteMemberDetail detail_control_velocity_ki_imm = TypeObjectUtils::build_complete_member_detail(name_control_velocity_ki_imm, member_ann_builtin_control_velocity_ki_imm, ann_custom_PIDIMMSetRequest);
            CompleteStructMember member_control_velocity_ki_imm = TypeObjectUtils::build_complete_struct_member(common_control_velocity_ki_imm, detail_control_velocity_ki_imm);
            TypeObjectUtils::add_complete_struct_member(member_seq_PIDIMMSetRequest, member_control_velocity_ki_imm);
        }
        CompleteStructType struct_type_PIDIMMSetRequest = TypeObjectUtils::build_complete_struct_type(struct_flags_PIDIMMSetRequest, header_PIDIMMSetRequest, member_seq_PIDIMMSetRequest);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_PIDIMMSetRequest, type_name_PIDIMMSetRequest.to_string(), type_ids_PIDIMMSetRequest))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "RobotSystem::PIDIMMSetRequest already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_PIDIMMSetResponse_type_identifier(
        TypeIdentifierPair& type_ids_PIDIMMSetResponse)
{

    ReturnCode_t return_code_PIDIMMSetResponse {eprosima::fastdds::dds::RETCODE_OK};
    return_code_PIDIMMSetResponse =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RobotSystem::PIDIMMSetResponse", type_ids_PIDIMMSetResponse);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_PIDIMMSetResponse)
    {
        StructTypeFlag struct_flags_PIDIMMSetResponse = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_PIDIMMSetResponse = "RobotSystem::PIDIMMSetResponse";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_PIDIMMSetResponse;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_PIDIMMSetResponse;
        CompleteTypeDetail detail_PIDIMMSetResponse = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_PIDIMMSetResponse, ann_custom_PIDIMMSetResponse, type_name_PIDIMMSetResponse.to_string());
        CompleteStructHeader header_PIDIMMSetResponse;
        header_PIDIMMSetResponse = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_PIDIMMSetResponse);
        CompleteStructMemberSeq member_seq_PIDIMMSetResponse;
        {
            TypeIdentifierPair type_ids_source;
            ReturnCode_t return_code_source {eprosima::fastdds::dds::RETCODE_OK};
            return_code_source =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_source);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_source)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_source))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_source = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_source = 0x00000000;
            bool common_source_ec {false};
            CommonStructMember common_source {TypeObjectUtils::build_common_struct_member(member_id_source, member_flags_source, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_source, common_source_ec))};
            if (!common_source_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure source member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_source = "source";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_source;
            ann_custom_PIDIMMSetResponse.reset();
            CompleteMemberDetail detail_source = TypeObjectUtils::build_complete_member_detail(name_source, member_ann_builtin_source, ann_custom_PIDIMMSetResponse);
            CompleteStructMember member_source = TypeObjectUtils::build_complete_struct_member(common_source, detail_source);
            TypeObjectUtils::add_complete_struct_member(member_seq_PIDIMMSetResponse, member_source);
        }
        {
            TypeIdentifierPair type_ids_timestamp;
            ReturnCode_t return_code_timestamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_timestamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_timestamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_timestamp)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "timestamp Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_timestamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_timestamp = 0x00000001;
            bool common_timestamp_ec {false};
            CommonStructMember common_timestamp {TypeObjectUtils::build_common_struct_member(member_id_timestamp, member_flags_timestamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_timestamp, common_timestamp_ec))};
            if (!common_timestamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure timestamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_timestamp = "timestamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_timestamp;
            ann_custom_PIDIMMSetResponse.reset();
            CompleteMemberDetail detail_timestamp = TypeObjectUtils::build_complete_member_detail(name_timestamp, member_ann_builtin_timestamp, ann_custom_PIDIMMSetResponse);
            CompleteStructMember member_timestamp = TypeObjectUtils::build_complete_struct_member(common_timestamp, detail_timestamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_PIDIMMSetResponse, member_timestamp);
        }
        {
            TypeIdentifierPair type_ids_status;
            ReturnCode_t return_code_status {eprosima::fastdds::dds::RETCODE_OK};
            return_code_status =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_status);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_status)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_status))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_status = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_status = 0x00000002;
            bool common_status_ec {false};
            CommonStructMember common_status {TypeObjectUtils::build_common_struct_member(member_id_status, member_flags_status, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_status, common_status_ec))};
            if (!common_status_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure status member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_status = "status";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_status;
            ann_custom_PIDIMMSetResponse.reset();
            CompleteMemberDetail detail_status = TypeObjectUtils::build_complete_member_detail(name_status, member_ann_builtin_status, ann_custom_PIDIMMSetResponse);
            CompleteStructMember member_status = TypeObjectUtils::build_complete_struct_member(common_status, detail_status);
            TypeObjectUtils::add_complete_struct_member(member_seq_PIDIMMSetResponse, member_status);
        }
        CompleteStructType struct_type_PIDIMMSetResponse = TypeObjectUtils::build_complete_struct_type(struct_flags_PIDIMMSetResponse, header_PIDIMMSetResponse, member_seq_PIDIMMSetResponse);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_PIDIMMSetResponse, type_name_PIDIMMSetResponse.to_string(), type_ids_PIDIMMSetResponse))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "RobotSystem::PIDIMMSetResponse already registered in TypeObjectRegistry for a different type.");
        }
    }
}

} // namespace RobotSystem

