// IDL文件：RobotSystem.idl
module RobotSystem {

    struct EncoderStateRequest {
        string target;               // 来源的设备名称，例如：xxx
    };

    // Publisher message
    // 编码器状态结构体（带有IP地址）
    struct EncoderStateResponse {
        string source;               // 来源的设备名称，例如：xxx
        unsigned long long timestamp;   // 时间戳（可选）
        string status;               // 状态信息，例如 "OK"
        float angle;                 // 当前角度（单位：度 degree）
        float radian;                // 当前角度（单位：弧度 radian）
    };

    // Subscriber message
    // 状态查询请求的结构体
    struct SystemStateRequest {
        string target;               // 目标设备名称，例如：body/arm_left
    };
    
    // Publisher message
    // 状态查询响应的结构体
    struct SystemStateResponse {
        string source;               // 来源的设备名称，例如：xxx
        unsigned long long timestamp;   // 时间戳（可选）
        long state;
        string status;
    };

    // Subscriber message
    // PVC状态查询请求的结构体
    struct PVCStateRequest {
        string target;               // 来源的设备名称，例如：xxx
        boolean position;      // 是否请求位置状态
        boolean velocity;      // 是否请求速度状态
        boolean current;       // 是否请求电流状态
    };

    // Publisher message
    // PVC状态查询响应的结构体
    struct PVCStateResponse {
        string source;               // 来源的设备名称，例如：xxx
        unsigned long long timestamp;   // 时间戳（可选）
        string status;         // "ok" 或 "error"
        float position;        // 位置状态（如果请求中指定）
        float velocity;        // 速度状态（如果请求中指定）
        float current;         // 电流状态（如果请求中指定）
    };

    // Subscriber message
    // 位置控制请求的结构体
    struct PositionControlRequest {
        string target;               // 来源的设备名称，例如：xxx
        boolean reply_enable;  // 是否需要回复
        float position;        // 位置
        float velocity_ff;     // 速度前馈
        float current_ff;      // 电流前馈
    };

    // Publisher message
    // 位置控制响应的结构体
    struct PositionControlResponse {
        string source;               // 来源的设备名称，例如：xxx
        unsigned long long timestamp;   // 时间戳（可选）
        string status;         // "ok" 或 "error"
        float position;        // 位置
        float velocity;    
        float current;      
        long current_id;
    };

    // Subscriber message
    // 电机控制请求的结构体
    struct MotorControlRequest {
        string target;               // 来源的设备名称，例如：xxx
        int32 control_word;    // 控制字
    };

    // Publisher message
    // 电机控制响应的结构体
    struct MotorControlResponse {
        string source;               // 来源的设备名称，例如：xxx
        unsigned long long timestamp;   // 时间戳（可选）
        string status;         // "ok" 或 "error"
    };

    // Subscriber message
    // 位置模式请求的结构体
    struct OperationModeRequest {
        string target;               // 来源的设备名称，例如：xxx
        int32 mode_of_operation; // 操作模式
    };

    // Publisher message
    // 位置模式响应的结构体
    struct OperationModeResponse {
        string source;               // 来源的设备名称，例如：xxx
        unsigned long long timestamp;   // 时间戳（可选）
        string status;         // "ok" 或 "error"
    };

    struct IMUStateRequest {
        string target;                 // "IMU"
    };

    // 新增的 IMU 状态响应结构体
    struct IMUStateResponse {
        string source;                 // 来源的设备名称，例如：imu_xxx
        unsigned long long timestamp;  // 时间戳（可选）
        string status;                 // "ok" 或 "error"
        string frame_type;             // 数据帧类型，例如 "HI91"
        float temperature;             // 温度，单位：摄氏度
        float pressure;                // 压力，单位：Pa
        unsigned long system_time_ms;  // 系统时间，单位：毫秒
        float sync_time;               // 同步时间，单位：秒
        float roll;                    // 角度：roll，单位：度
        float pitch;                   // 角度：pitch，单位：度
        float yaw;                     // 角度：yaw，单位：度
        float acceleration_x;         // 加速度 (G)
        float acceleration_y;         // 加速度 (G)
        float acceleration_z;         // 加速度 (G)
        float gyroscope_x;            // 陀螺仪数据 (dps)
        float gyroscope_y;            // 陀螺仪数据 (dps)
        float gyroscope_z;            // 陀螺仪数据 (dps)
        float magnetometer_x;         // 磁力计数据 (uT)
        float magnetometer_y;         // 磁力计数据 (uT)
        float magnetometer_z;         // 磁力计数据 (uT)
        float quaternion_x;           // 四元数 
        float quaternion_y;           // 四元数
        float quaternion_z;           // 四元数
        float quaternion_w;           // 四元数
    };

    struct PIDIMMGetRequest {
        string target; 
    };

    struct PIDIMMGetResponse {
        string source;                 // 来源的设备名称，例如：imu_xxx
        unsigned long long timestamp;  // 时间戳（可选）
        string status;
        float control_position_kp_imm;
        float control_velocity_kp_imm;
        float control_velocity_ki_imm;
        float control_current_kp_imm;
        float control_current_ki_imm;
    };

    struct PIDIMMSetRequest {
        string target; 
        float control_position_kp_imm;
        float control_velocity_kp_imm;
        float control_velocity_ki_imm;
    };

    struct PIDIMMSetResponse {
        string source;                 // 来源的设备名称，例如：imu_xxx
        unsigned long long timestamp;  // 时间戳（可选）
        string status;
    };
};