// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file RobotSystem.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__ROBOTSYSTEM_ROBOTSYSTEM_HPP
#define FAST_DDS_GENERATED__ROBOTSYSTEM_ROBOTSYSTEM_HPP

#include <cstdint>
#include <string>
#include <utility>
#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ROBOTSYSTEM_SOURCE)
#define ROBOTSYSTEM_DllAPI __declspec( dllexport )
#else
#define ROBOTSYSTEM_DllAPI __declspec( dllimport )
#endif // ROBOTSYSTEM_SOURCE
#else
#define ROBOTSYSTEM_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ROBOTSYSTEM_DllAPI
#endif // _WIN32

namespace RobotSystem {

/*!
 * @brief This class represents the structure EncoderStateRequest defined by the user in the IDL file.
 * @ingroup RobotSystem
 */
class EncoderStateRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport EncoderStateRequest()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~EncoderStateRequest()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object EncoderStateRequest that will be copied.
     */
    eProsima_user_DllExport EncoderStateRequest(
            const EncoderStateRequest& x)
    {
                    m_target = x.m_target;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object EncoderStateRequest that will be copied.
     */
    eProsima_user_DllExport EncoderStateRequest(
            EncoderStateRequest&& x) noexcept
    {
        m_target = std::move(x.m_target);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object EncoderStateRequest that will be copied.
     */
    eProsima_user_DllExport EncoderStateRequest& operator =(
            const EncoderStateRequest& x)
    {

                    m_target = x.m_target;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object EncoderStateRequest that will be copied.
     */
    eProsima_user_DllExport EncoderStateRequest& operator =(
            EncoderStateRequest&& x) noexcept
    {

        m_target = std::move(x.m_target);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x EncoderStateRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const EncoderStateRequest& x) const
    {
        return (m_target == x.m_target);
    }

    /*!
     * @brief Comparison operator.
     * @param x EncoderStateRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const EncoderStateRequest& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member target
     * @param _target New value to be copied in member target
     */
    eProsima_user_DllExport void target(
            const std::string& _target)
    {
        m_target = _target;
    }

    /*!
     * @brief This function moves the value in member target
     * @param _target New value to be moved in member target
     */
    eProsima_user_DllExport void target(
            std::string&& _target)
    {
        m_target = std::move(_target);
    }

    /*!
     * @brief This function returns a constant reference to member target
     * @return Constant reference to member target
     */
    eProsima_user_DllExport const std::string& target() const
    {
        return m_target;
    }

    /*!
     * @brief This function returns a reference to member target
     * @return Reference to member target
     */
    eProsima_user_DllExport std::string& target()
    {
        return m_target;
    }



private:

    std::string m_target;

};
/*!
 * @brief This class represents the structure EncoderStateResponse defined by the user in the IDL file.
 * @ingroup RobotSystem
 */
class EncoderStateResponse
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport EncoderStateResponse()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~EncoderStateResponse()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object EncoderStateResponse that will be copied.
     */
    eProsima_user_DllExport EncoderStateResponse(
            const EncoderStateResponse& x)
    {
                    m_source = x.m_source;

                    m_timestamp = x.m_timestamp;

                    m_status = x.m_status;

                    m_angle = x.m_angle;

                    m_radian = x.m_radian;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object EncoderStateResponse that will be copied.
     */
    eProsima_user_DllExport EncoderStateResponse(
            EncoderStateResponse&& x) noexcept
    {
        m_source = std::move(x.m_source);
        m_timestamp = x.m_timestamp;
        m_status = std::move(x.m_status);
        m_angle = x.m_angle;
        m_radian = x.m_radian;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object EncoderStateResponse that will be copied.
     */
    eProsima_user_DllExport EncoderStateResponse& operator =(
            const EncoderStateResponse& x)
    {

                    m_source = x.m_source;

                    m_timestamp = x.m_timestamp;

                    m_status = x.m_status;

                    m_angle = x.m_angle;

                    m_radian = x.m_radian;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object EncoderStateResponse that will be copied.
     */
    eProsima_user_DllExport EncoderStateResponse& operator =(
            EncoderStateResponse&& x) noexcept
    {

        m_source = std::move(x.m_source);
        m_timestamp = x.m_timestamp;
        m_status = std::move(x.m_status);
        m_angle = x.m_angle;
        m_radian = x.m_radian;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x EncoderStateResponse object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const EncoderStateResponse& x) const
    {
        return (m_source == x.m_source &&
           m_timestamp == x.m_timestamp &&
           m_status == x.m_status &&
           m_angle == x.m_angle &&
           m_radian == x.m_radian);
    }

    /*!
     * @brief Comparison operator.
     * @param x EncoderStateResponse object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const EncoderStateResponse& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member source
     * @param _source New value to be copied in member source
     */
    eProsima_user_DllExport void source(
            const std::string& _source)
    {
        m_source = _source;
    }

    /*!
     * @brief This function moves the value in member source
     * @param _source New value to be moved in member source
     */
    eProsima_user_DllExport void source(
            std::string&& _source)
    {
        m_source = std::move(_source);
    }

    /*!
     * @brief This function returns a constant reference to member source
     * @return Constant reference to member source
     */
    eProsima_user_DllExport const std::string& source() const
    {
        return m_source;
    }

    /*!
     * @brief This function returns a reference to member source
     * @return Reference to member source
     */
    eProsima_user_DllExport std::string& source()
    {
        return m_source;
    }


    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp()
    {
        return m_timestamp;
    }


    /*!
     * @brief This function copies the value in member status
     * @param _status New value to be copied in member status
     */
    eProsima_user_DllExport void status(
            const std::string& _status)
    {
        m_status = _status;
    }

    /*!
     * @brief This function moves the value in member status
     * @param _status New value to be moved in member status
     */
    eProsima_user_DllExport void status(
            std::string&& _status)
    {
        m_status = std::move(_status);
    }

    /*!
     * @brief This function returns a constant reference to member status
     * @return Constant reference to member status
     */
    eProsima_user_DllExport const std::string& status() const
    {
        return m_status;
    }

    /*!
     * @brief This function returns a reference to member status
     * @return Reference to member status
     */
    eProsima_user_DllExport std::string& status()
    {
        return m_status;
    }


    /*!
     * @brief This function sets a value in member angle
     * @param _angle New value for member angle
     */
    eProsima_user_DllExport void angle(
            float _angle)
    {
        m_angle = _angle;
    }

    /*!
     * @brief This function returns the value of member angle
     * @return Value of member angle
     */
    eProsima_user_DllExport float angle() const
    {
        return m_angle;
    }

    /*!
     * @brief This function returns a reference to member angle
     * @return Reference to member angle
     */
    eProsima_user_DllExport float& angle()
    {
        return m_angle;
    }


    /*!
     * @brief This function sets a value in member radian
     * @param _radian New value for member radian
     */
    eProsima_user_DllExport void radian(
            float _radian)
    {
        m_radian = _radian;
    }

    /*!
     * @brief This function returns the value of member radian
     * @return Value of member radian
     */
    eProsima_user_DllExport float radian() const
    {
        return m_radian;
    }

    /*!
     * @brief This function returns a reference to member radian
     * @return Reference to member radian
     */
    eProsima_user_DllExport float& radian()
    {
        return m_radian;
    }



private:

    std::string m_source;
    uint64_t m_timestamp{0};
    std::string m_status;
    float m_angle{0.0};
    float m_radian{0.0};

};
/*!
 * @brief This class represents the structure SystemStateRequest defined by the user in the IDL file.
 * @ingroup RobotSystem
 */
class SystemStateRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SystemStateRequest()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SystemStateRequest()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SystemStateRequest that will be copied.
     */
    eProsima_user_DllExport SystemStateRequest(
            const SystemStateRequest& x)
    {
                    m_target = x.m_target;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SystemStateRequest that will be copied.
     */
    eProsima_user_DllExport SystemStateRequest(
            SystemStateRequest&& x) noexcept
    {
        m_target = std::move(x.m_target);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SystemStateRequest that will be copied.
     */
    eProsima_user_DllExport SystemStateRequest& operator =(
            const SystemStateRequest& x)
    {

                    m_target = x.m_target;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SystemStateRequest that will be copied.
     */
    eProsima_user_DllExport SystemStateRequest& operator =(
            SystemStateRequest&& x) noexcept
    {

        m_target = std::move(x.m_target);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SystemStateRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SystemStateRequest& x) const
    {
        return (m_target == x.m_target);
    }

    /*!
     * @brief Comparison operator.
     * @param x SystemStateRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SystemStateRequest& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member target
     * @param _target New value to be copied in member target
     */
    eProsima_user_DllExport void target(
            const std::string& _target)
    {
        m_target = _target;
    }

    /*!
     * @brief This function moves the value in member target
     * @param _target New value to be moved in member target
     */
    eProsima_user_DllExport void target(
            std::string&& _target)
    {
        m_target = std::move(_target);
    }

    /*!
     * @brief This function returns a constant reference to member target
     * @return Constant reference to member target
     */
    eProsima_user_DllExport const std::string& target() const
    {
        return m_target;
    }

    /*!
     * @brief This function returns a reference to member target
     * @return Reference to member target
     */
    eProsima_user_DllExport std::string& target()
    {
        return m_target;
    }



private:

    std::string m_target;

};
/*!
 * @brief This class represents the structure SystemStateResponse defined by the user in the IDL file.
 * @ingroup RobotSystem
 */
class SystemStateResponse
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SystemStateResponse()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SystemStateResponse()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SystemStateResponse that will be copied.
     */
    eProsima_user_DllExport SystemStateResponse(
            const SystemStateResponse& x)
    {
                    m_source = x.m_source;

                    m_timestamp = x.m_timestamp;

                    m_state = x.m_state;

                    m_status = x.m_status;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SystemStateResponse that will be copied.
     */
    eProsima_user_DllExport SystemStateResponse(
            SystemStateResponse&& x) noexcept
    {
        m_source = std::move(x.m_source);
        m_timestamp = x.m_timestamp;
        m_state = x.m_state;
        m_status = std::move(x.m_status);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SystemStateResponse that will be copied.
     */
    eProsima_user_DllExport SystemStateResponse& operator =(
            const SystemStateResponse& x)
    {

                    m_source = x.m_source;

                    m_timestamp = x.m_timestamp;

                    m_state = x.m_state;

                    m_status = x.m_status;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SystemStateResponse that will be copied.
     */
    eProsima_user_DllExport SystemStateResponse& operator =(
            SystemStateResponse&& x) noexcept
    {

        m_source = std::move(x.m_source);
        m_timestamp = x.m_timestamp;
        m_state = x.m_state;
        m_status = std::move(x.m_status);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SystemStateResponse object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SystemStateResponse& x) const
    {
        return (m_source == x.m_source &&
           m_timestamp == x.m_timestamp &&
           m_state == x.m_state &&
           m_status == x.m_status);
    }

    /*!
     * @brief Comparison operator.
     * @param x SystemStateResponse object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SystemStateResponse& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member source
     * @param _source New value to be copied in member source
     */
    eProsima_user_DllExport void source(
            const std::string& _source)
    {
        m_source = _source;
    }

    /*!
     * @brief This function moves the value in member source
     * @param _source New value to be moved in member source
     */
    eProsima_user_DllExport void source(
            std::string&& _source)
    {
        m_source = std::move(_source);
    }

    /*!
     * @brief This function returns a constant reference to member source
     * @return Constant reference to member source
     */
    eProsima_user_DllExport const std::string& source() const
    {
        return m_source;
    }

    /*!
     * @brief This function returns a reference to member source
     * @return Reference to member source
     */
    eProsima_user_DllExport std::string& source()
    {
        return m_source;
    }


    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp()
    {
        return m_timestamp;
    }


    /*!
     * @brief This function sets a value in member state
     * @param _state New value for member state
     */
    eProsima_user_DllExport void state(
            int32_t _state)
    {
        m_state = _state;
    }

    /*!
     * @brief This function returns the value of member state
     * @return Value of member state
     */
    eProsima_user_DllExport int32_t state() const
    {
        return m_state;
    }

    /*!
     * @brief This function returns a reference to member state
     * @return Reference to member state
     */
    eProsima_user_DllExport int32_t& state()
    {
        return m_state;
    }


    /*!
     * @brief This function copies the value in member status
     * @param _status New value to be copied in member status
     */
    eProsima_user_DllExport void status(
            const std::string& _status)
    {
        m_status = _status;
    }

    /*!
     * @brief This function moves the value in member status
     * @param _status New value to be moved in member status
     */
    eProsima_user_DllExport void status(
            std::string&& _status)
    {
        m_status = std::move(_status);
    }

    /*!
     * @brief This function returns a constant reference to member status
     * @return Constant reference to member status
     */
    eProsima_user_DllExport const std::string& status() const
    {
        return m_status;
    }

    /*!
     * @brief This function returns a reference to member status
     * @return Reference to member status
     */
    eProsima_user_DllExport std::string& status()
    {
        return m_status;
    }



private:

    std::string m_source;
    uint64_t m_timestamp{0};
    int32_t m_state{0};
    std::string m_status;

};
/*!
 * @brief This class represents the structure PVCStateRequest defined by the user in the IDL file.
 * @ingroup RobotSystem
 */
class PVCStateRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport PVCStateRequest()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~PVCStateRequest()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object PVCStateRequest that will be copied.
     */
    eProsima_user_DllExport PVCStateRequest(
            const PVCStateRequest& x)
    {
                    m_target = x.m_target;

                    m_position = x.m_position;

                    m_velocity = x.m_velocity;

                    m_current = x.m_current;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object PVCStateRequest that will be copied.
     */
    eProsima_user_DllExport PVCStateRequest(
            PVCStateRequest&& x) noexcept
    {
        m_target = std::move(x.m_target);
        m_position = x.m_position;
        m_velocity = x.m_velocity;
        m_current = x.m_current;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object PVCStateRequest that will be copied.
     */
    eProsima_user_DllExport PVCStateRequest& operator =(
            const PVCStateRequest& x)
    {

                    m_target = x.m_target;

                    m_position = x.m_position;

                    m_velocity = x.m_velocity;

                    m_current = x.m_current;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object PVCStateRequest that will be copied.
     */
    eProsima_user_DllExport PVCStateRequest& operator =(
            PVCStateRequest&& x) noexcept
    {

        m_target = std::move(x.m_target);
        m_position = x.m_position;
        m_velocity = x.m_velocity;
        m_current = x.m_current;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x PVCStateRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const PVCStateRequest& x) const
    {
        return (m_target == x.m_target &&
           m_position == x.m_position &&
           m_velocity == x.m_velocity &&
           m_current == x.m_current);
    }

    /*!
     * @brief Comparison operator.
     * @param x PVCStateRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const PVCStateRequest& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member target
     * @param _target New value to be copied in member target
     */
    eProsima_user_DllExport void target(
            const std::string& _target)
    {
        m_target = _target;
    }

    /*!
     * @brief This function moves the value in member target
     * @param _target New value to be moved in member target
     */
    eProsima_user_DllExport void target(
            std::string&& _target)
    {
        m_target = std::move(_target);
    }

    /*!
     * @brief This function returns a constant reference to member target
     * @return Constant reference to member target
     */
    eProsima_user_DllExport const std::string& target() const
    {
        return m_target;
    }

    /*!
     * @brief This function returns a reference to member target
     * @return Reference to member target
     */
    eProsima_user_DllExport std::string& target()
    {
        return m_target;
    }


    /*!
     * @brief This function sets a value in member position
     * @param _position New value for member position
     */
    eProsima_user_DllExport void position(
            bool _position)
    {
        m_position = _position;
    }

    /*!
     * @brief This function returns the value of member position
     * @return Value of member position
     */
    eProsima_user_DllExport bool position() const
    {
        return m_position;
    }

    /*!
     * @brief This function returns a reference to member position
     * @return Reference to member position
     */
    eProsima_user_DllExport bool& position()
    {
        return m_position;
    }


    /*!
     * @brief This function sets a value in member velocity
     * @param _velocity New value for member velocity
     */
    eProsima_user_DllExport void velocity(
            bool _velocity)
    {
        m_velocity = _velocity;
    }

    /*!
     * @brief This function returns the value of member velocity
     * @return Value of member velocity
     */
    eProsima_user_DllExport bool velocity() const
    {
        return m_velocity;
    }

    /*!
     * @brief This function returns a reference to member velocity
     * @return Reference to member velocity
     */
    eProsima_user_DllExport bool& velocity()
    {
        return m_velocity;
    }


    /*!
     * @brief This function sets a value in member current
     * @param _current New value for member current
     */
    eProsima_user_DllExport void current(
            bool _current)
    {
        m_current = _current;
    }

    /*!
     * @brief This function returns the value of member current
     * @return Value of member current
     */
    eProsima_user_DllExport bool current() const
    {
        return m_current;
    }

    /*!
     * @brief This function returns a reference to member current
     * @return Reference to member current
     */
    eProsima_user_DllExport bool& current()
    {
        return m_current;
    }



private:

    std::string m_target;
    bool m_position{false};
    bool m_velocity{false};
    bool m_current{false};

};
/*!
 * @brief This class represents the structure PVCStateResponse defined by the user in the IDL file.
 * @ingroup RobotSystem
 */
class PVCStateResponse
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport PVCStateResponse()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~PVCStateResponse()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object PVCStateResponse that will be copied.
     */
    eProsima_user_DllExport PVCStateResponse(
            const PVCStateResponse& x)
    {
                    m_source = x.m_source;

                    m_timestamp = x.m_timestamp;

                    m_status = x.m_status;

                    m_position = x.m_position;

                    m_velocity = x.m_velocity;

                    m_current = x.m_current;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object PVCStateResponse that will be copied.
     */
    eProsima_user_DllExport PVCStateResponse(
            PVCStateResponse&& x) noexcept
    {
        m_source = std::move(x.m_source);
        m_timestamp = x.m_timestamp;
        m_status = std::move(x.m_status);
        m_position = x.m_position;
        m_velocity = x.m_velocity;
        m_current = x.m_current;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object PVCStateResponse that will be copied.
     */
    eProsima_user_DllExport PVCStateResponse& operator =(
            const PVCStateResponse& x)
    {

                    m_source = x.m_source;

                    m_timestamp = x.m_timestamp;

                    m_status = x.m_status;

                    m_position = x.m_position;

                    m_velocity = x.m_velocity;

                    m_current = x.m_current;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object PVCStateResponse that will be copied.
     */
    eProsima_user_DllExport PVCStateResponse& operator =(
            PVCStateResponse&& x) noexcept
    {

        m_source = std::move(x.m_source);
        m_timestamp = x.m_timestamp;
        m_status = std::move(x.m_status);
        m_position = x.m_position;
        m_velocity = x.m_velocity;
        m_current = x.m_current;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x PVCStateResponse object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const PVCStateResponse& x) const
    {
        return (m_source == x.m_source &&
           m_timestamp == x.m_timestamp &&
           m_status == x.m_status &&
           m_position == x.m_position &&
           m_velocity == x.m_velocity &&
           m_current == x.m_current);
    }

    /*!
     * @brief Comparison operator.
     * @param x PVCStateResponse object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const PVCStateResponse& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member source
     * @param _source New value to be copied in member source
     */
    eProsima_user_DllExport void source(
            const std::string& _source)
    {
        m_source = _source;
    }

    /*!
     * @brief This function moves the value in member source
     * @param _source New value to be moved in member source
     */
    eProsima_user_DllExport void source(
            std::string&& _source)
    {
        m_source = std::move(_source);
    }

    /*!
     * @brief This function returns a constant reference to member source
     * @return Constant reference to member source
     */
    eProsima_user_DllExport const std::string& source() const
    {
        return m_source;
    }

    /*!
     * @brief This function returns a reference to member source
     * @return Reference to member source
     */
    eProsima_user_DllExport std::string& source()
    {
        return m_source;
    }


    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp()
    {
        return m_timestamp;
    }


    /*!
     * @brief This function copies the value in member status
     * @param _status New value to be copied in member status
     */
    eProsima_user_DllExport void status(
            const std::string& _status)
    {
        m_status = _status;
    }

    /*!
     * @brief This function moves the value in member status
     * @param _status New value to be moved in member status
     */
    eProsima_user_DllExport void status(
            std::string&& _status)
    {
        m_status = std::move(_status);
    }

    /*!
     * @brief This function returns a constant reference to member status
     * @return Constant reference to member status
     */
    eProsima_user_DllExport const std::string& status() const
    {
        return m_status;
    }

    /*!
     * @brief This function returns a reference to member status
     * @return Reference to member status
     */
    eProsima_user_DllExport std::string& status()
    {
        return m_status;
    }


    /*!
     * @brief This function sets a value in member position
     * @param _position New value for member position
     */
    eProsima_user_DllExport void position(
            float _position)
    {
        m_position = _position;
    }

    /*!
     * @brief This function returns the value of member position
     * @return Value of member position
     */
    eProsima_user_DllExport float position() const
    {
        return m_position;
    }

    /*!
     * @brief This function returns a reference to member position
     * @return Reference to member position
     */
    eProsima_user_DllExport float& position()
    {
        return m_position;
    }


    /*!
     * @brief This function sets a value in member velocity
     * @param _velocity New value for member velocity
     */
    eProsima_user_DllExport void velocity(
            float _velocity)
    {
        m_velocity = _velocity;
    }

    /*!
     * @brief This function returns the value of member velocity
     * @return Value of member velocity
     */
    eProsima_user_DllExport float velocity() const
    {
        return m_velocity;
    }

    /*!
     * @brief This function returns a reference to member velocity
     * @return Reference to member velocity
     */
    eProsima_user_DllExport float& velocity()
    {
        return m_velocity;
    }


    /*!
     * @brief This function sets a value in member current
     * @param _current New value for member current
     */
    eProsima_user_DllExport void current(
            float _current)
    {
        m_current = _current;
    }

    /*!
     * @brief This function returns the value of member current
     * @return Value of member current
     */
    eProsima_user_DllExport float current() const
    {
        return m_current;
    }

    /*!
     * @brief This function returns a reference to member current
     * @return Reference to member current
     */
    eProsima_user_DllExport float& current()
    {
        return m_current;
    }



private:

    std::string m_source;
    uint64_t m_timestamp{0};
    std::string m_status;
    float m_position{0.0};
    float m_velocity{0.0};
    float m_current{0.0};

};
/*!
 * @brief This class represents the structure PositionControlRequest defined by the user in the IDL file.
 * @ingroup RobotSystem
 */
class PositionControlRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport PositionControlRequest()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~PositionControlRequest()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object PositionControlRequest that will be copied.
     */
    eProsima_user_DllExport PositionControlRequest(
            const PositionControlRequest& x)
    {
                    m_target = x.m_target;

                    m_reply_enable = x.m_reply_enable;

                    m_position = x.m_position;

                    m_velocity_ff = x.m_velocity_ff;

                    m_current_ff = x.m_current_ff;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object PositionControlRequest that will be copied.
     */
    eProsima_user_DllExport PositionControlRequest(
            PositionControlRequest&& x) noexcept
    {
        m_target = std::move(x.m_target);
        m_reply_enable = x.m_reply_enable;
        m_position = x.m_position;
        m_velocity_ff = x.m_velocity_ff;
        m_current_ff = x.m_current_ff;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object PositionControlRequest that will be copied.
     */
    eProsima_user_DllExport PositionControlRequest& operator =(
            const PositionControlRequest& x)
    {

                    m_target = x.m_target;

                    m_reply_enable = x.m_reply_enable;

                    m_position = x.m_position;

                    m_velocity_ff = x.m_velocity_ff;

                    m_current_ff = x.m_current_ff;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object PositionControlRequest that will be copied.
     */
    eProsima_user_DllExport PositionControlRequest& operator =(
            PositionControlRequest&& x) noexcept
    {

        m_target = std::move(x.m_target);
        m_reply_enable = x.m_reply_enable;
        m_position = x.m_position;
        m_velocity_ff = x.m_velocity_ff;
        m_current_ff = x.m_current_ff;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x PositionControlRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const PositionControlRequest& x) const
    {
        return (m_target == x.m_target &&
           m_reply_enable == x.m_reply_enable &&
           m_position == x.m_position &&
           m_velocity_ff == x.m_velocity_ff &&
           m_current_ff == x.m_current_ff);
    }

    /*!
     * @brief Comparison operator.
     * @param x PositionControlRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const PositionControlRequest& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member target
     * @param _target New value to be copied in member target
     */
    eProsima_user_DllExport void target(
            const std::string& _target)
    {
        m_target = _target;
    }

    /*!
     * @brief This function moves the value in member target
     * @param _target New value to be moved in member target
     */
    eProsima_user_DllExport void target(
            std::string&& _target)
    {
        m_target = std::move(_target);
    }

    /*!
     * @brief This function returns a constant reference to member target
     * @return Constant reference to member target
     */
    eProsima_user_DllExport const std::string& target() const
    {
        return m_target;
    }

    /*!
     * @brief This function returns a reference to member target
     * @return Reference to member target
     */
    eProsima_user_DllExport std::string& target()
    {
        return m_target;
    }


    /*!
     * @brief This function sets a value in member reply_enable
     * @param _reply_enable New value for member reply_enable
     */
    eProsima_user_DllExport void reply_enable(
            bool _reply_enable)
    {
        m_reply_enable = _reply_enable;
    }

    /*!
     * @brief This function returns the value of member reply_enable
     * @return Value of member reply_enable
     */
    eProsima_user_DllExport bool reply_enable() const
    {
        return m_reply_enable;
    }

    /*!
     * @brief This function returns a reference to member reply_enable
     * @return Reference to member reply_enable
     */
    eProsima_user_DllExport bool& reply_enable()
    {
        return m_reply_enable;
    }


    /*!
     * @brief This function sets a value in member position
     * @param _position New value for member position
     */
    eProsima_user_DllExport void position(
            float _position)
    {
        m_position = _position;
    }

    /*!
     * @brief This function returns the value of member position
     * @return Value of member position
     */
    eProsima_user_DllExport float position() const
    {
        return m_position;
    }

    /*!
     * @brief This function returns a reference to member position
     * @return Reference to member position
     */
    eProsima_user_DllExport float& position()
    {
        return m_position;
    }


    /*!
     * @brief This function sets a value in member velocity_ff
     * @param _velocity_ff New value for member velocity_ff
     */
    eProsima_user_DllExport void velocity_ff(
            float _velocity_ff)
    {
        m_velocity_ff = _velocity_ff;
    }

    /*!
     * @brief This function returns the value of member velocity_ff
     * @return Value of member velocity_ff
     */
    eProsima_user_DllExport float velocity_ff() const
    {
        return m_velocity_ff;
    }

    /*!
     * @brief This function returns a reference to member velocity_ff
     * @return Reference to member velocity_ff
     */
    eProsima_user_DllExport float& velocity_ff()
    {
        return m_velocity_ff;
    }


    /*!
     * @brief This function sets a value in member current_ff
     * @param _current_ff New value for member current_ff
     */
    eProsima_user_DllExport void current_ff(
            float _current_ff)
    {
        m_current_ff = _current_ff;
    }

    /*!
     * @brief This function returns the value of member current_ff
     * @return Value of member current_ff
     */
    eProsima_user_DllExport float current_ff() const
    {
        return m_current_ff;
    }

    /*!
     * @brief This function returns a reference to member current_ff
     * @return Reference to member current_ff
     */
    eProsima_user_DllExport float& current_ff()
    {
        return m_current_ff;
    }



private:

    std::string m_target;
    bool m_reply_enable{false};
    float m_position{0.0};
    float m_velocity_ff{0.0};
    float m_current_ff{0.0};

};
/*!
 * @brief This class represents the structure PositionControlResponse defined by the user in the IDL file.
 * @ingroup RobotSystem
 */
class PositionControlResponse
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport PositionControlResponse()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~PositionControlResponse()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object PositionControlResponse that will be copied.
     */
    eProsima_user_DllExport PositionControlResponse(
            const PositionControlResponse& x)
    {
                    m_source = x.m_source;

                    m_timestamp = x.m_timestamp;

                    m_status = x.m_status;

                    m_position = x.m_position;

                    m_velocity = x.m_velocity;

                    m_current = x.m_current;

                    m_current_id = x.m_current_id;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object PositionControlResponse that will be copied.
     */
    eProsima_user_DllExport PositionControlResponse(
            PositionControlResponse&& x) noexcept
    {
        m_source = std::move(x.m_source);
        m_timestamp = x.m_timestamp;
        m_status = std::move(x.m_status);
        m_position = x.m_position;
        m_velocity = x.m_velocity;
        m_current = x.m_current;
        m_current_id = x.m_current_id;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object PositionControlResponse that will be copied.
     */
    eProsima_user_DllExport PositionControlResponse& operator =(
            const PositionControlResponse& x)
    {

                    m_source = x.m_source;

                    m_timestamp = x.m_timestamp;

                    m_status = x.m_status;

                    m_position = x.m_position;

                    m_velocity = x.m_velocity;

                    m_current = x.m_current;

                    m_current_id = x.m_current_id;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object PositionControlResponse that will be copied.
     */
    eProsima_user_DllExport PositionControlResponse& operator =(
            PositionControlResponse&& x) noexcept
    {

        m_source = std::move(x.m_source);
        m_timestamp = x.m_timestamp;
        m_status = std::move(x.m_status);
        m_position = x.m_position;
        m_velocity = x.m_velocity;
        m_current = x.m_current;
        m_current_id = x.m_current_id;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x PositionControlResponse object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const PositionControlResponse& x) const
    {
        return (m_source == x.m_source &&
           m_timestamp == x.m_timestamp &&
           m_status == x.m_status &&
           m_position == x.m_position &&
           m_velocity == x.m_velocity &&
           m_current == x.m_current &&
           m_current_id == x.m_current_id);
    }

    /*!
     * @brief Comparison operator.
     * @param x PositionControlResponse object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const PositionControlResponse& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member source
     * @param _source New value to be copied in member source
     */
    eProsima_user_DllExport void source(
            const std::string& _source)
    {
        m_source = _source;
    }

    /*!
     * @brief This function moves the value in member source
     * @param _source New value to be moved in member source
     */
    eProsima_user_DllExport void source(
            std::string&& _source)
    {
        m_source = std::move(_source);
    }

    /*!
     * @brief This function returns a constant reference to member source
     * @return Constant reference to member source
     */
    eProsima_user_DllExport const std::string& source() const
    {
        return m_source;
    }

    /*!
     * @brief This function returns a reference to member source
     * @return Reference to member source
     */
    eProsima_user_DllExport std::string& source()
    {
        return m_source;
    }


    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp()
    {
        return m_timestamp;
    }


    /*!
     * @brief This function copies the value in member status
     * @param _status New value to be copied in member status
     */
    eProsima_user_DllExport void status(
            const std::string& _status)
    {
        m_status = _status;
    }

    /*!
     * @brief This function moves the value in member status
     * @param _status New value to be moved in member status
     */
    eProsima_user_DllExport void status(
            std::string&& _status)
    {
        m_status = std::move(_status);
    }

    /*!
     * @brief This function returns a constant reference to member status
     * @return Constant reference to member status
     */
    eProsima_user_DllExport const std::string& status() const
    {
        return m_status;
    }

    /*!
     * @brief This function returns a reference to member status
     * @return Reference to member status
     */
    eProsima_user_DllExport std::string& status()
    {
        return m_status;
    }


    /*!
     * @brief This function sets a value in member position
     * @param _position New value for member position
     */
    eProsima_user_DllExport void position(
            float _position)
    {
        m_position = _position;
    }

    /*!
     * @brief This function returns the value of member position
     * @return Value of member position
     */
    eProsima_user_DllExport float position() const
    {
        return m_position;
    }

    /*!
     * @brief This function returns a reference to member position
     * @return Reference to member position
     */
    eProsima_user_DllExport float& position()
    {
        return m_position;
    }


    /*!
     * @brief This function sets a value in member velocity
     * @param _velocity New value for member velocity
     */
    eProsima_user_DllExport void velocity(
            float _velocity)
    {
        m_velocity = _velocity;
    }

    /*!
     * @brief This function returns the value of member velocity
     * @return Value of member velocity
     */
    eProsima_user_DllExport float velocity() const
    {
        return m_velocity;
    }

    /*!
     * @brief This function returns a reference to member velocity
     * @return Reference to member velocity
     */
    eProsima_user_DllExport float& velocity()
    {
        return m_velocity;
    }


    /*!
     * @brief This function sets a value in member current
     * @param _current New value for member current
     */
    eProsima_user_DllExport void current(
            float _current)
    {
        m_current = _current;
    }

    /*!
     * @brief This function returns the value of member current
     * @return Value of member current
     */
    eProsima_user_DllExport float current() const
    {
        return m_current;
    }

    /*!
     * @brief This function returns a reference to member current
     * @return Reference to member current
     */
    eProsima_user_DllExport float& current()
    {
        return m_current;
    }


    /*!
     * @brief This function sets a value in member current_id
     * @param _current_id New value for member current_id
     */
    eProsima_user_DllExport void current_id(
            int32_t _current_id)
    {
        m_current_id = _current_id;
    }

    /*!
     * @brief This function returns the value of member current_id
     * @return Value of member current_id
     */
    eProsima_user_DllExport int32_t current_id() const
    {
        return m_current_id;
    }

    /*!
     * @brief This function returns a reference to member current_id
     * @return Reference to member current_id
     */
    eProsima_user_DllExport int32_t& current_id()
    {
        return m_current_id;
    }



private:

    std::string m_source;
    uint64_t m_timestamp{0};
    std::string m_status;
    float m_position{0.0};
    float m_velocity{0.0};
    float m_current{0.0};
    int32_t m_current_id{0};

};
/*!
 * @brief This class represents the structure MotorControlRequest defined by the user in the IDL file.
 * @ingroup RobotSystem
 */
class MotorControlRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MotorControlRequest()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MotorControlRequest()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MotorControlRequest that will be copied.
     */
    eProsima_user_DllExport MotorControlRequest(
            const MotorControlRequest& x)
    {
                    m_target = x.m_target;

                    m_control_word = x.m_control_word;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MotorControlRequest that will be copied.
     */
    eProsima_user_DllExport MotorControlRequest(
            MotorControlRequest&& x) noexcept
    {
        m_target = std::move(x.m_target);
        m_control_word = x.m_control_word;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MotorControlRequest that will be copied.
     */
    eProsima_user_DllExport MotorControlRequest& operator =(
            const MotorControlRequest& x)
    {

                    m_target = x.m_target;

                    m_control_word = x.m_control_word;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MotorControlRequest that will be copied.
     */
    eProsima_user_DllExport MotorControlRequest& operator =(
            MotorControlRequest&& x) noexcept
    {

        m_target = std::move(x.m_target);
        m_control_word = x.m_control_word;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MotorControlRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MotorControlRequest& x) const
    {
        return (m_target == x.m_target &&
           m_control_word == x.m_control_word);
    }

    /*!
     * @brief Comparison operator.
     * @param x MotorControlRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MotorControlRequest& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member target
     * @param _target New value to be copied in member target
     */
    eProsima_user_DllExport void target(
            const std::string& _target)
    {
        m_target = _target;
    }

    /*!
     * @brief This function moves the value in member target
     * @param _target New value to be moved in member target
     */
    eProsima_user_DllExport void target(
            std::string&& _target)
    {
        m_target = std::move(_target);
    }

    /*!
     * @brief This function returns a constant reference to member target
     * @return Constant reference to member target
     */
    eProsima_user_DllExport const std::string& target() const
    {
        return m_target;
    }

    /*!
     * @brief This function returns a reference to member target
     * @return Reference to member target
     */
    eProsima_user_DllExport std::string& target()
    {
        return m_target;
    }


    /*!
     * @brief This function sets a value in member control_word
     * @param _control_word New value for member control_word
     */
    eProsima_user_DllExport void control_word(
            int32_t _control_word)
    {
        m_control_word = _control_word;
    }

    /*!
     * @brief This function returns the value of member control_word
     * @return Value of member control_word
     */
    eProsima_user_DllExport int32_t control_word() const
    {
        return m_control_word;
    }

    /*!
     * @brief This function returns a reference to member control_word
     * @return Reference to member control_word
     */
    eProsima_user_DllExport int32_t& control_word()
    {
        return m_control_word;
    }



private:

    std::string m_target;
    int32_t m_control_word{0};

};
/*!
 * @brief This class represents the structure MotorControlResponse defined by the user in the IDL file.
 * @ingroup RobotSystem
 */
class MotorControlResponse
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MotorControlResponse()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MotorControlResponse()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MotorControlResponse that will be copied.
     */
    eProsima_user_DllExport MotorControlResponse(
            const MotorControlResponse& x)
    {
                    m_source = x.m_source;

                    m_timestamp = x.m_timestamp;

                    m_status = x.m_status;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MotorControlResponse that will be copied.
     */
    eProsima_user_DllExport MotorControlResponse(
            MotorControlResponse&& x) noexcept
    {
        m_source = std::move(x.m_source);
        m_timestamp = x.m_timestamp;
        m_status = std::move(x.m_status);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MotorControlResponse that will be copied.
     */
    eProsima_user_DllExport MotorControlResponse& operator =(
            const MotorControlResponse& x)
    {

                    m_source = x.m_source;

                    m_timestamp = x.m_timestamp;

                    m_status = x.m_status;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MotorControlResponse that will be copied.
     */
    eProsima_user_DllExport MotorControlResponse& operator =(
            MotorControlResponse&& x) noexcept
    {

        m_source = std::move(x.m_source);
        m_timestamp = x.m_timestamp;
        m_status = std::move(x.m_status);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MotorControlResponse object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MotorControlResponse& x) const
    {
        return (m_source == x.m_source &&
           m_timestamp == x.m_timestamp &&
           m_status == x.m_status);
    }

    /*!
     * @brief Comparison operator.
     * @param x MotorControlResponse object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MotorControlResponse& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member source
     * @param _source New value to be copied in member source
     */
    eProsima_user_DllExport void source(
            const std::string& _source)
    {
        m_source = _source;
    }

    /*!
     * @brief This function moves the value in member source
     * @param _source New value to be moved in member source
     */
    eProsima_user_DllExport void source(
            std::string&& _source)
    {
        m_source = std::move(_source);
    }

    /*!
     * @brief This function returns a constant reference to member source
     * @return Constant reference to member source
     */
    eProsima_user_DllExport const std::string& source() const
    {
        return m_source;
    }

    /*!
     * @brief This function returns a reference to member source
     * @return Reference to member source
     */
    eProsima_user_DllExport std::string& source()
    {
        return m_source;
    }


    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp()
    {
        return m_timestamp;
    }


    /*!
     * @brief This function copies the value in member status
     * @param _status New value to be copied in member status
     */
    eProsima_user_DllExport void status(
            const std::string& _status)
    {
        m_status = _status;
    }

    /*!
     * @brief This function moves the value in member status
     * @param _status New value to be moved in member status
     */
    eProsima_user_DllExport void status(
            std::string&& _status)
    {
        m_status = std::move(_status);
    }

    /*!
     * @brief This function returns a constant reference to member status
     * @return Constant reference to member status
     */
    eProsima_user_DllExport const std::string& status() const
    {
        return m_status;
    }

    /*!
     * @brief This function returns a reference to member status
     * @return Reference to member status
     */
    eProsima_user_DllExport std::string& status()
    {
        return m_status;
    }



private:

    std::string m_source;
    uint64_t m_timestamp{0};
    std::string m_status;

};
/*!
 * @brief This class represents the structure OperationModeRequest defined by the user in the IDL file.
 * @ingroup RobotSystem
 */
class OperationModeRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OperationModeRequest()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OperationModeRequest()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object OperationModeRequest that will be copied.
     */
    eProsima_user_DllExport OperationModeRequest(
            const OperationModeRequest& x)
    {
                    m_target = x.m_target;

                    m_mode_of_operation = x.m_mode_of_operation;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object OperationModeRequest that will be copied.
     */
    eProsima_user_DllExport OperationModeRequest(
            OperationModeRequest&& x) noexcept
    {
        m_target = std::move(x.m_target);
        m_mode_of_operation = x.m_mode_of_operation;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object OperationModeRequest that will be copied.
     */
    eProsima_user_DllExport OperationModeRequest& operator =(
            const OperationModeRequest& x)
    {

                    m_target = x.m_target;

                    m_mode_of_operation = x.m_mode_of_operation;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object OperationModeRequest that will be copied.
     */
    eProsima_user_DllExport OperationModeRequest& operator =(
            OperationModeRequest&& x) noexcept
    {

        m_target = std::move(x.m_target);
        m_mode_of_operation = x.m_mode_of_operation;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x OperationModeRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OperationModeRequest& x) const
    {
        return (m_target == x.m_target &&
           m_mode_of_operation == x.m_mode_of_operation);
    }

    /*!
     * @brief Comparison operator.
     * @param x OperationModeRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OperationModeRequest& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member target
     * @param _target New value to be copied in member target
     */
    eProsima_user_DllExport void target(
            const std::string& _target)
    {
        m_target = _target;
    }

    /*!
     * @brief This function moves the value in member target
     * @param _target New value to be moved in member target
     */
    eProsima_user_DllExport void target(
            std::string&& _target)
    {
        m_target = std::move(_target);
    }

    /*!
     * @brief This function returns a constant reference to member target
     * @return Constant reference to member target
     */
    eProsima_user_DllExport const std::string& target() const
    {
        return m_target;
    }

    /*!
     * @brief This function returns a reference to member target
     * @return Reference to member target
     */
    eProsima_user_DllExport std::string& target()
    {
        return m_target;
    }


    /*!
     * @brief This function sets a value in member mode_of_operation
     * @param _mode_of_operation New value for member mode_of_operation
     */
    eProsima_user_DllExport void mode_of_operation(
            int32_t _mode_of_operation)
    {
        m_mode_of_operation = _mode_of_operation;
    }

    /*!
     * @brief This function returns the value of member mode_of_operation
     * @return Value of member mode_of_operation
     */
    eProsima_user_DllExport int32_t mode_of_operation() const
    {
        return m_mode_of_operation;
    }

    /*!
     * @brief This function returns a reference to member mode_of_operation
     * @return Reference to member mode_of_operation
     */
    eProsima_user_DllExport int32_t& mode_of_operation()
    {
        return m_mode_of_operation;
    }



private:

    std::string m_target;
    int32_t m_mode_of_operation{0};

};
/*!
 * @brief This class represents the structure OperationModeResponse defined by the user in the IDL file.
 * @ingroup RobotSystem
 */
class OperationModeResponse
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OperationModeResponse()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OperationModeResponse()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object OperationModeResponse that will be copied.
     */
    eProsima_user_DllExport OperationModeResponse(
            const OperationModeResponse& x)
    {
                    m_source = x.m_source;

                    m_timestamp = x.m_timestamp;

                    m_status = x.m_status;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object OperationModeResponse that will be copied.
     */
    eProsima_user_DllExport OperationModeResponse(
            OperationModeResponse&& x) noexcept
    {
        m_source = std::move(x.m_source);
        m_timestamp = x.m_timestamp;
        m_status = std::move(x.m_status);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object OperationModeResponse that will be copied.
     */
    eProsima_user_DllExport OperationModeResponse& operator =(
            const OperationModeResponse& x)
    {

                    m_source = x.m_source;

                    m_timestamp = x.m_timestamp;

                    m_status = x.m_status;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object OperationModeResponse that will be copied.
     */
    eProsima_user_DllExport OperationModeResponse& operator =(
            OperationModeResponse&& x) noexcept
    {

        m_source = std::move(x.m_source);
        m_timestamp = x.m_timestamp;
        m_status = std::move(x.m_status);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x OperationModeResponse object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OperationModeResponse& x) const
    {
        return (m_source == x.m_source &&
           m_timestamp == x.m_timestamp &&
           m_status == x.m_status);
    }

    /*!
     * @brief Comparison operator.
     * @param x OperationModeResponse object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OperationModeResponse& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member source
     * @param _source New value to be copied in member source
     */
    eProsima_user_DllExport void source(
            const std::string& _source)
    {
        m_source = _source;
    }

    /*!
     * @brief This function moves the value in member source
     * @param _source New value to be moved in member source
     */
    eProsima_user_DllExport void source(
            std::string&& _source)
    {
        m_source = std::move(_source);
    }

    /*!
     * @brief This function returns a constant reference to member source
     * @return Constant reference to member source
     */
    eProsima_user_DllExport const std::string& source() const
    {
        return m_source;
    }

    /*!
     * @brief This function returns a reference to member source
     * @return Reference to member source
     */
    eProsima_user_DllExport std::string& source()
    {
        return m_source;
    }


    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp()
    {
        return m_timestamp;
    }


    /*!
     * @brief This function copies the value in member status
     * @param _status New value to be copied in member status
     */
    eProsima_user_DllExport void status(
            const std::string& _status)
    {
        m_status = _status;
    }

    /*!
     * @brief This function moves the value in member status
     * @param _status New value to be moved in member status
     */
    eProsima_user_DllExport void status(
            std::string&& _status)
    {
        m_status = std::move(_status);
    }

    /*!
     * @brief This function returns a constant reference to member status
     * @return Constant reference to member status
     */
    eProsima_user_DllExport const std::string& status() const
    {
        return m_status;
    }

    /*!
     * @brief This function returns a reference to member status
     * @return Reference to member status
     */
    eProsima_user_DllExport std::string& status()
    {
        return m_status;
    }



private:

    std::string m_source;
    uint64_t m_timestamp{0};
    std::string m_status;

};
/*!
 * @brief This class represents the structure IMUStateRequest defined by the user in the IDL file.
 * @ingroup RobotSystem
 */
class IMUStateRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport IMUStateRequest()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~IMUStateRequest()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object IMUStateRequest that will be copied.
     */
    eProsima_user_DllExport IMUStateRequest(
            const IMUStateRequest& x)
    {
                    m_target = x.m_target;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object IMUStateRequest that will be copied.
     */
    eProsima_user_DllExport IMUStateRequest(
            IMUStateRequest&& x) noexcept
    {
        m_target = std::move(x.m_target);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object IMUStateRequest that will be copied.
     */
    eProsima_user_DllExport IMUStateRequest& operator =(
            const IMUStateRequest& x)
    {

                    m_target = x.m_target;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object IMUStateRequest that will be copied.
     */
    eProsima_user_DllExport IMUStateRequest& operator =(
            IMUStateRequest&& x) noexcept
    {

        m_target = std::move(x.m_target);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x IMUStateRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const IMUStateRequest& x) const
    {
        return (m_target == x.m_target);
    }

    /*!
     * @brief Comparison operator.
     * @param x IMUStateRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const IMUStateRequest& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member target
     * @param _target New value to be copied in member target
     */
    eProsima_user_DllExport void target(
            const std::string& _target)
    {
        m_target = _target;
    }

    /*!
     * @brief This function moves the value in member target
     * @param _target New value to be moved in member target
     */
    eProsima_user_DllExport void target(
            std::string&& _target)
    {
        m_target = std::move(_target);
    }

    /*!
     * @brief This function returns a constant reference to member target
     * @return Constant reference to member target
     */
    eProsima_user_DllExport const std::string& target() const
    {
        return m_target;
    }

    /*!
     * @brief This function returns a reference to member target
     * @return Reference to member target
     */
    eProsima_user_DllExport std::string& target()
    {
        return m_target;
    }



private:

    std::string m_target;

};
/*!
 * @brief This class represents the structure IMUStateResponse defined by the user in the IDL file.
 * @ingroup RobotSystem
 */
class IMUStateResponse
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport IMUStateResponse()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~IMUStateResponse()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object IMUStateResponse that will be copied.
     */
    eProsima_user_DllExport IMUStateResponse(
            const IMUStateResponse& x)
    {
                    m_source = x.m_source;

                    m_timestamp = x.m_timestamp;

                    m_status = x.m_status;

                    m_frame_type = x.m_frame_type;

                    m_temperature = x.m_temperature;

                    m_pressure = x.m_pressure;

                    m_system_time_ms = x.m_system_time_ms;

                    m_sync_time = x.m_sync_time;

                    m_roll = x.m_roll;

                    m_pitch = x.m_pitch;

                    m_yaw = x.m_yaw;

                    m_acceleration_x = x.m_acceleration_x;

                    m_acceleration_y = x.m_acceleration_y;

                    m_acceleration_z = x.m_acceleration_z;

                    m_gyroscope_x = x.m_gyroscope_x;

                    m_gyroscope_y = x.m_gyroscope_y;

                    m_gyroscope_z = x.m_gyroscope_z;

                    m_magnetometer_x = x.m_magnetometer_x;

                    m_magnetometer_y = x.m_magnetometer_y;

                    m_magnetometer_z = x.m_magnetometer_z;

                    m_quaternion_x = x.m_quaternion_x;

                    m_quaternion_y = x.m_quaternion_y;

                    m_quaternion_z = x.m_quaternion_z;

                    m_quaternion_w = x.m_quaternion_w;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object IMUStateResponse that will be copied.
     */
    eProsima_user_DllExport IMUStateResponse(
            IMUStateResponse&& x) noexcept
    {
        m_source = std::move(x.m_source);
        m_timestamp = x.m_timestamp;
        m_status = std::move(x.m_status);
        m_frame_type = std::move(x.m_frame_type);
        m_temperature = x.m_temperature;
        m_pressure = x.m_pressure;
        m_system_time_ms = x.m_system_time_ms;
        m_sync_time = x.m_sync_time;
        m_roll = x.m_roll;
        m_pitch = x.m_pitch;
        m_yaw = x.m_yaw;
        m_acceleration_x = x.m_acceleration_x;
        m_acceleration_y = x.m_acceleration_y;
        m_acceleration_z = x.m_acceleration_z;
        m_gyroscope_x = x.m_gyroscope_x;
        m_gyroscope_y = x.m_gyroscope_y;
        m_gyroscope_z = x.m_gyroscope_z;
        m_magnetometer_x = x.m_magnetometer_x;
        m_magnetometer_y = x.m_magnetometer_y;
        m_magnetometer_z = x.m_magnetometer_z;
        m_quaternion_x = x.m_quaternion_x;
        m_quaternion_y = x.m_quaternion_y;
        m_quaternion_z = x.m_quaternion_z;
        m_quaternion_w = x.m_quaternion_w;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object IMUStateResponse that will be copied.
     */
    eProsima_user_DllExport IMUStateResponse& operator =(
            const IMUStateResponse& x)
    {

                    m_source = x.m_source;

                    m_timestamp = x.m_timestamp;

                    m_status = x.m_status;

                    m_frame_type = x.m_frame_type;

                    m_temperature = x.m_temperature;

                    m_pressure = x.m_pressure;

                    m_system_time_ms = x.m_system_time_ms;

                    m_sync_time = x.m_sync_time;

                    m_roll = x.m_roll;

                    m_pitch = x.m_pitch;

                    m_yaw = x.m_yaw;

                    m_acceleration_x = x.m_acceleration_x;

                    m_acceleration_y = x.m_acceleration_y;

                    m_acceleration_z = x.m_acceleration_z;

                    m_gyroscope_x = x.m_gyroscope_x;

                    m_gyroscope_y = x.m_gyroscope_y;

                    m_gyroscope_z = x.m_gyroscope_z;

                    m_magnetometer_x = x.m_magnetometer_x;

                    m_magnetometer_y = x.m_magnetometer_y;

                    m_magnetometer_z = x.m_magnetometer_z;

                    m_quaternion_x = x.m_quaternion_x;

                    m_quaternion_y = x.m_quaternion_y;

                    m_quaternion_z = x.m_quaternion_z;

                    m_quaternion_w = x.m_quaternion_w;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object IMUStateResponse that will be copied.
     */
    eProsima_user_DllExport IMUStateResponse& operator =(
            IMUStateResponse&& x) noexcept
    {

        m_source = std::move(x.m_source);
        m_timestamp = x.m_timestamp;
        m_status = std::move(x.m_status);
        m_frame_type = std::move(x.m_frame_type);
        m_temperature = x.m_temperature;
        m_pressure = x.m_pressure;
        m_system_time_ms = x.m_system_time_ms;
        m_sync_time = x.m_sync_time;
        m_roll = x.m_roll;
        m_pitch = x.m_pitch;
        m_yaw = x.m_yaw;
        m_acceleration_x = x.m_acceleration_x;
        m_acceleration_y = x.m_acceleration_y;
        m_acceleration_z = x.m_acceleration_z;
        m_gyroscope_x = x.m_gyroscope_x;
        m_gyroscope_y = x.m_gyroscope_y;
        m_gyroscope_z = x.m_gyroscope_z;
        m_magnetometer_x = x.m_magnetometer_x;
        m_magnetometer_y = x.m_magnetometer_y;
        m_magnetometer_z = x.m_magnetometer_z;
        m_quaternion_x = x.m_quaternion_x;
        m_quaternion_y = x.m_quaternion_y;
        m_quaternion_z = x.m_quaternion_z;
        m_quaternion_w = x.m_quaternion_w;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x IMUStateResponse object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const IMUStateResponse& x) const
    {
        return (m_source == x.m_source &&
           m_timestamp == x.m_timestamp &&
           m_status == x.m_status &&
           m_frame_type == x.m_frame_type &&
           m_temperature == x.m_temperature &&
           m_pressure == x.m_pressure &&
           m_system_time_ms == x.m_system_time_ms &&
           m_sync_time == x.m_sync_time &&
           m_roll == x.m_roll &&
           m_pitch == x.m_pitch &&
           m_yaw == x.m_yaw &&
           m_acceleration_x == x.m_acceleration_x &&
           m_acceleration_y == x.m_acceleration_y &&
           m_acceleration_z == x.m_acceleration_z &&
           m_gyroscope_x == x.m_gyroscope_x &&
           m_gyroscope_y == x.m_gyroscope_y &&
           m_gyroscope_z == x.m_gyroscope_z &&
           m_magnetometer_x == x.m_magnetometer_x &&
           m_magnetometer_y == x.m_magnetometer_y &&
           m_magnetometer_z == x.m_magnetometer_z &&
           m_quaternion_x == x.m_quaternion_x &&
           m_quaternion_y == x.m_quaternion_y &&
           m_quaternion_z == x.m_quaternion_z &&
           m_quaternion_w == x.m_quaternion_w);
    }

    /*!
     * @brief Comparison operator.
     * @param x IMUStateResponse object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const IMUStateResponse& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member source
     * @param _source New value to be copied in member source
     */
    eProsima_user_DllExport void source(
            const std::string& _source)
    {
        m_source = _source;
    }

    /*!
     * @brief This function moves the value in member source
     * @param _source New value to be moved in member source
     */
    eProsima_user_DllExport void source(
            std::string&& _source)
    {
        m_source = std::move(_source);
    }

    /*!
     * @brief This function returns a constant reference to member source
     * @return Constant reference to member source
     */
    eProsima_user_DllExport const std::string& source() const
    {
        return m_source;
    }

    /*!
     * @brief This function returns a reference to member source
     * @return Reference to member source
     */
    eProsima_user_DllExport std::string& source()
    {
        return m_source;
    }


    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp()
    {
        return m_timestamp;
    }


    /*!
     * @brief This function copies the value in member status
     * @param _status New value to be copied in member status
     */
    eProsima_user_DllExport void status(
            const std::string& _status)
    {
        m_status = _status;
    }

    /*!
     * @brief This function moves the value in member status
     * @param _status New value to be moved in member status
     */
    eProsima_user_DllExport void status(
            std::string&& _status)
    {
        m_status = std::move(_status);
    }

    /*!
     * @brief This function returns a constant reference to member status
     * @return Constant reference to member status
     */
    eProsima_user_DllExport const std::string& status() const
    {
        return m_status;
    }

    /*!
     * @brief This function returns a reference to member status
     * @return Reference to member status
     */
    eProsima_user_DllExport std::string& status()
    {
        return m_status;
    }


    /*!
     * @brief This function copies the value in member frame_type
     * @param _frame_type New value to be copied in member frame_type
     */
    eProsima_user_DllExport void frame_type(
            const std::string& _frame_type)
    {
        m_frame_type = _frame_type;
    }

    /*!
     * @brief This function moves the value in member frame_type
     * @param _frame_type New value to be moved in member frame_type
     */
    eProsima_user_DllExport void frame_type(
            std::string&& _frame_type)
    {
        m_frame_type = std::move(_frame_type);
    }

    /*!
     * @brief This function returns a constant reference to member frame_type
     * @return Constant reference to member frame_type
     */
    eProsima_user_DllExport const std::string& frame_type() const
    {
        return m_frame_type;
    }

    /*!
     * @brief This function returns a reference to member frame_type
     * @return Reference to member frame_type
     */
    eProsima_user_DllExport std::string& frame_type()
    {
        return m_frame_type;
    }


    /*!
     * @brief This function sets a value in member temperature
     * @param _temperature New value for member temperature
     */
    eProsima_user_DllExport void temperature(
            float _temperature)
    {
        m_temperature = _temperature;
    }

    /*!
     * @brief This function returns the value of member temperature
     * @return Value of member temperature
     */
    eProsima_user_DllExport float temperature() const
    {
        return m_temperature;
    }

    /*!
     * @brief This function returns a reference to member temperature
     * @return Reference to member temperature
     */
    eProsima_user_DllExport float& temperature()
    {
        return m_temperature;
    }


    /*!
     * @brief This function sets a value in member pressure
     * @param _pressure New value for member pressure
     */
    eProsima_user_DllExport void pressure(
            float _pressure)
    {
        m_pressure = _pressure;
    }

    /*!
     * @brief This function returns the value of member pressure
     * @return Value of member pressure
     */
    eProsima_user_DllExport float pressure() const
    {
        return m_pressure;
    }

    /*!
     * @brief This function returns a reference to member pressure
     * @return Reference to member pressure
     */
    eProsima_user_DllExport float& pressure()
    {
        return m_pressure;
    }


    /*!
     * @brief This function sets a value in member system_time_ms
     * @param _system_time_ms New value for member system_time_ms
     */
    eProsima_user_DllExport void system_time_ms(
            uint32_t _system_time_ms)
    {
        m_system_time_ms = _system_time_ms;
    }

    /*!
     * @brief This function returns the value of member system_time_ms
     * @return Value of member system_time_ms
     */
    eProsima_user_DllExport uint32_t system_time_ms() const
    {
        return m_system_time_ms;
    }

    /*!
     * @brief This function returns a reference to member system_time_ms
     * @return Reference to member system_time_ms
     */
    eProsima_user_DllExport uint32_t& system_time_ms()
    {
        return m_system_time_ms;
    }


    /*!
     * @brief This function sets a value in member sync_time
     * @param _sync_time New value for member sync_time
     */
    eProsima_user_DllExport void sync_time(
            float _sync_time)
    {
        m_sync_time = _sync_time;
    }

    /*!
     * @brief This function returns the value of member sync_time
     * @return Value of member sync_time
     */
    eProsima_user_DllExport float sync_time() const
    {
        return m_sync_time;
    }

    /*!
     * @brief This function returns a reference to member sync_time
     * @return Reference to member sync_time
     */
    eProsima_user_DllExport float& sync_time()
    {
        return m_sync_time;
    }


    /*!
     * @brief This function sets a value in member roll
     * @param _roll New value for member roll
     */
    eProsima_user_DllExport void roll(
            float _roll)
    {
        m_roll = _roll;
    }

    /*!
     * @brief This function returns the value of member roll
     * @return Value of member roll
     */
    eProsima_user_DllExport float roll() const
    {
        return m_roll;
    }

    /*!
     * @brief This function returns a reference to member roll
     * @return Reference to member roll
     */
    eProsima_user_DllExport float& roll()
    {
        return m_roll;
    }


    /*!
     * @brief This function sets a value in member pitch
     * @param _pitch New value for member pitch
     */
    eProsima_user_DllExport void pitch(
            float _pitch)
    {
        m_pitch = _pitch;
    }

    /*!
     * @brief This function returns the value of member pitch
     * @return Value of member pitch
     */
    eProsima_user_DllExport float pitch() const
    {
        return m_pitch;
    }

    /*!
     * @brief This function returns a reference to member pitch
     * @return Reference to member pitch
     */
    eProsima_user_DllExport float& pitch()
    {
        return m_pitch;
    }


    /*!
     * @brief This function sets a value in member yaw
     * @param _yaw New value for member yaw
     */
    eProsima_user_DllExport void yaw(
            float _yaw)
    {
        m_yaw = _yaw;
    }

    /*!
     * @brief This function returns the value of member yaw
     * @return Value of member yaw
     */
    eProsima_user_DllExport float yaw() const
    {
        return m_yaw;
    }

    /*!
     * @brief This function returns a reference to member yaw
     * @return Reference to member yaw
     */
    eProsima_user_DllExport float& yaw()
    {
        return m_yaw;
    }


    /*!
     * @brief This function sets a value in member acceleration_x
     * @param _acceleration_x New value for member acceleration_x
     */
    eProsima_user_DllExport void acceleration_x(
            float _acceleration_x)
    {
        m_acceleration_x = _acceleration_x;
    }

    /*!
     * @brief This function returns the value of member acceleration_x
     * @return Value of member acceleration_x
     */
    eProsima_user_DllExport float acceleration_x() const
    {
        return m_acceleration_x;
    }

    /*!
     * @brief This function returns a reference to member acceleration_x
     * @return Reference to member acceleration_x
     */
    eProsima_user_DllExport float& acceleration_x()
    {
        return m_acceleration_x;
    }


    /*!
     * @brief This function sets a value in member acceleration_y
     * @param _acceleration_y New value for member acceleration_y
     */
    eProsima_user_DllExport void acceleration_y(
            float _acceleration_y)
    {
        m_acceleration_y = _acceleration_y;
    }

    /*!
     * @brief This function returns the value of member acceleration_y
     * @return Value of member acceleration_y
     */
    eProsima_user_DllExport float acceleration_y() const
    {
        return m_acceleration_y;
    }

    /*!
     * @brief This function returns a reference to member acceleration_y
     * @return Reference to member acceleration_y
     */
    eProsima_user_DllExport float& acceleration_y()
    {
        return m_acceleration_y;
    }


    /*!
     * @brief This function sets a value in member acceleration_z
     * @param _acceleration_z New value for member acceleration_z
     */
    eProsima_user_DllExport void acceleration_z(
            float _acceleration_z)
    {
        m_acceleration_z = _acceleration_z;
    }

    /*!
     * @brief This function returns the value of member acceleration_z
     * @return Value of member acceleration_z
     */
    eProsima_user_DllExport float acceleration_z() const
    {
        return m_acceleration_z;
    }

    /*!
     * @brief This function returns a reference to member acceleration_z
     * @return Reference to member acceleration_z
     */
    eProsima_user_DllExport float& acceleration_z()
    {
        return m_acceleration_z;
    }


    /*!
     * @brief This function sets a value in member gyroscope_x
     * @param _gyroscope_x New value for member gyroscope_x
     */
    eProsima_user_DllExport void gyroscope_x(
            float _gyroscope_x)
    {
        m_gyroscope_x = _gyroscope_x;
    }

    /*!
     * @brief This function returns the value of member gyroscope_x
     * @return Value of member gyroscope_x
     */
    eProsima_user_DllExport float gyroscope_x() const
    {
        return m_gyroscope_x;
    }

    /*!
     * @brief This function returns a reference to member gyroscope_x
     * @return Reference to member gyroscope_x
     */
    eProsima_user_DllExport float& gyroscope_x()
    {
        return m_gyroscope_x;
    }


    /*!
     * @brief This function sets a value in member gyroscope_y
     * @param _gyroscope_y New value for member gyroscope_y
     */
    eProsima_user_DllExport void gyroscope_y(
            float _gyroscope_y)
    {
        m_gyroscope_y = _gyroscope_y;
    }

    /*!
     * @brief This function returns the value of member gyroscope_y
     * @return Value of member gyroscope_y
     */
    eProsima_user_DllExport float gyroscope_y() const
    {
        return m_gyroscope_y;
    }

    /*!
     * @brief This function returns a reference to member gyroscope_y
     * @return Reference to member gyroscope_y
     */
    eProsima_user_DllExport float& gyroscope_y()
    {
        return m_gyroscope_y;
    }


    /*!
     * @brief This function sets a value in member gyroscope_z
     * @param _gyroscope_z New value for member gyroscope_z
     */
    eProsima_user_DllExport void gyroscope_z(
            float _gyroscope_z)
    {
        m_gyroscope_z = _gyroscope_z;
    }

    /*!
     * @brief This function returns the value of member gyroscope_z
     * @return Value of member gyroscope_z
     */
    eProsima_user_DllExport float gyroscope_z() const
    {
        return m_gyroscope_z;
    }

    /*!
     * @brief This function returns a reference to member gyroscope_z
     * @return Reference to member gyroscope_z
     */
    eProsima_user_DllExport float& gyroscope_z()
    {
        return m_gyroscope_z;
    }


    /*!
     * @brief This function sets a value in member magnetometer_x
     * @param _magnetometer_x New value for member magnetometer_x
     */
    eProsima_user_DllExport void magnetometer_x(
            float _magnetometer_x)
    {
        m_magnetometer_x = _magnetometer_x;
    }

    /*!
     * @brief This function returns the value of member magnetometer_x
     * @return Value of member magnetometer_x
     */
    eProsima_user_DllExport float magnetometer_x() const
    {
        return m_magnetometer_x;
    }

    /*!
     * @brief This function returns a reference to member magnetometer_x
     * @return Reference to member magnetometer_x
     */
    eProsima_user_DllExport float& magnetometer_x()
    {
        return m_magnetometer_x;
    }


    /*!
     * @brief This function sets a value in member magnetometer_y
     * @param _magnetometer_y New value for member magnetometer_y
     */
    eProsima_user_DllExport void magnetometer_y(
            float _magnetometer_y)
    {
        m_magnetometer_y = _magnetometer_y;
    }

    /*!
     * @brief This function returns the value of member magnetometer_y
     * @return Value of member magnetometer_y
     */
    eProsima_user_DllExport float magnetometer_y() const
    {
        return m_magnetometer_y;
    }

    /*!
     * @brief This function returns a reference to member magnetometer_y
     * @return Reference to member magnetometer_y
     */
    eProsima_user_DllExport float& magnetometer_y()
    {
        return m_magnetometer_y;
    }


    /*!
     * @brief This function sets a value in member magnetometer_z
     * @param _magnetometer_z New value for member magnetometer_z
     */
    eProsima_user_DllExport void magnetometer_z(
            float _magnetometer_z)
    {
        m_magnetometer_z = _magnetometer_z;
    }

    /*!
     * @brief This function returns the value of member magnetometer_z
     * @return Value of member magnetometer_z
     */
    eProsima_user_DllExport float magnetometer_z() const
    {
        return m_magnetometer_z;
    }

    /*!
     * @brief This function returns a reference to member magnetometer_z
     * @return Reference to member magnetometer_z
     */
    eProsima_user_DllExport float& magnetometer_z()
    {
        return m_magnetometer_z;
    }


    /*!
     * @brief This function sets a value in member quaternion_x
     * @param _quaternion_x New value for member quaternion_x
     */
    eProsima_user_DllExport void quaternion_x(
            float _quaternion_x)
    {
        m_quaternion_x = _quaternion_x;
    }

    /*!
     * @brief This function returns the value of member quaternion_x
     * @return Value of member quaternion_x
     */
    eProsima_user_DllExport float quaternion_x() const
    {
        return m_quaternion_x;
    }

    /*!
     * @brief This function returns a reference to member quaternion_x
     * @return Reference to member quaternion_x
     */
    eProsima_user_DllExport float& quaternion_x()
    {
        return m_quaternion_x;
    }


    /*!
     * @brief This function sets a value in member quaternion_y
     * @param _quaternion_y New value for member quaternion_y
     */
    eProsima_user_DllExport void quaternion_y(
            float _quaternion_y)
    {
        m_quaternion_y = _quaternion_y;
    }

    /*!
     * @brief This function returns the value of member quaternion_y
     * @return Value of member quaternion_y
     */
    eProsima_user_DllExport float quaternion_y() const
    {
        return m_quaternion_y;
    }

    /*!
     * @brief This function returns a reference to member quaternion_y
     * @return Reference to member quaternion_y
     */
    eProsima_user_DllExport float& quaternion_y()
    {
        return m_quaternion_y;
    }


    /*!
     * @brief This function sets a value in member quaternion_z
     * @param _quaternion_z New value for member quaternion_z
     */
    eProsima_user_DllExport void quaternion_z(
            float _quaternion_z)
    {
        m_quaternion_z = _quaternion_z;
    }

    /*!
     * @brief This function returns the value of member quaternion_z
     * @return Value of member quaternion_z
     */
    eProsima_user_DllExport float quaternion_z() const
    {
        return m_quaternion_z;
    }

    /*!
     * @brief This function returns a reference to member quaternion_z
     * @return Reference to member quaternion_z
     */
    eProsima_user_DllExport float& quaternion_z()
    {
        return m_quaternion_z;
    }


    /*!
     * @brief This function sets a value in member quaternion_w
     * @param _quaternion_w New value for member quaternion_w
     */
    eProsima_user_DllExport void quaternion_w(
            float _quaternion_w)
    {
        m_quaternion_w = _quaternion_w;
    }

    /*!
     * @brief This function returns the value of member quaternion_w
     * @return Value of member quaternion_w
     */
    eProsima_user_DllExport float quaternion_w() const
    {
        return m_quaternion_w;
    }

    /*!
     * @brief This function returns a reference to member quaternion_w
     * @return Reference to member quaternion_w
     */
    eProsima_user_DllExport float& quaternion_w()
    {
        return m_quaternion_w;
    }



private:

    std::string m_source;
    uint64_t m_timestamp{0};
    std::string m_status;
    std::string m_frame_type;
    float m_temperature{0.0};
    float m_pressure{0.0};
    uint32_t m_system_time_ms{0};
    float m_sync_time{0.0};
    float m_roll{0.0};
    float m_pitch{0.0};
    float m_yaw{0.0};
    float m_acceleration_x{0.0};
    float m_acceleration_y{0.0};
    float m_acceleration_z{0.0};
    float m_gyroscope_x{0.0};
    float m_gyroscope_y{0.0};
    float m_gyroscope_z{0.0};
    float m_magnetometer_x{0.0};
    float m_magnetometer_y{0.0};
    float m_magnetometer_z{0.0};
    float m_quaternion_x{0.0};
    float m_quaternion_y{0.0};
    float m_quaternion_z{0.0};
    float m_quaternion_w{0.0};

};
/*!
 * @brief This class represents the structure PIDIMMGetRequest defined by the user in the IDL file.
 * @ingroup RobotSystem
 */
class PIDIMMGetRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport PIDIMMGetRequest()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~PIDIMMGetRequest()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object PIDIMMGetRequest that will be copied.
     */
    eProsima_user_DllExport PIDIMMGetRequest(
            const PIDIMMGetRequest& x)
    {
                    m_target = x.m_target;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object PIDIMMGetRequest that will be copied.
     */
    eProsima_user_DllExport PIDIMMGetRequest(
            PIDIMMGetRequest&& x) noexcept
    {
        m_target = std::move(x.m_target);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object PIDIMMGetRequest that will be copied.
     */
    eProsima_user_DllExport PIDIMMGetRequest& operator =(
            const PIDIMMGetRequest& x)
    {

                    m_target = x.m_target;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object PIDIMMGetRequest that will be copied.
     */
    eProsima_user_DllExport PIDIMMGetRequest& operator =(
            PIDIMMGetRequest&& x) noexcept
    {

        m_target = std::move(x.m_target);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x PIDIMMGetRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const PIDIMMGetRequest& x) const
    {
        return (m_target == x.m_target);
    }

    /*!
     * @brief Comparison operator.
     * @param x PIDIMMGetRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const PIDIMMGetRequest& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member target
     * @param _target New value to be copied in member target
     */
    eProsima_user_DllExport void target(
            const std::string& _target)
    {
        m_target = _target;
    }

    /*!
     * @brief This function moves the value in member target
     * @param _target New value to be moved in member target
     */
    eProsima_user_DllExport void target(
            std::string&& _target)
    {
        m_target = std::move(_target);
    }

    /*!
     * @brief This function returns a constant reference to member target
     * @return Constant reference to member target
     */
    eProsima_user_DllExport const std::string& target() const
    {
        return m_target;
    }

    /*!
     * @brief This function returns a reference to member target
     * @return Reference to member target
     */
    eProsima_user_DllExport std::string& target()
    {
        return m_target;
    }



private:

    std::string m_target;

};
/*!
 * @brief This class represents the structure PIDIMMGetResponse defined by the user in the IDL file.
 * @ingroup RobotSystem
 */
class PIDIMMGetResponse
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport PIDIMMGetResponse()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~PIDIMMGetResponse()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object PIDIMMGetResponse that will be copied.
     */
    eProsima_user_DllExport PIDIMMGetResponse(
            const PIDIMMGetResponse& x)
    {
                    m_source = x.m_source;

                    m_timestamp = x.m_timestamp;

                    m_status = x.m_status;

                    m_control_position_kp_imm = x.m_control_position_kp_imm;

                    m_control_velocity_kp_imm = x.m_control_velocity_kp_imm;

                    m_control_velocity_ki_imm = x.m_control_velocity_ki_imm;

                    m_control_current_kp_imm = x.m_control_current_kp_imm;

                    m_control_current_ki_imm = x.m_control_current_ki_imm;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object PIDIMMGetResponse that will be copied.
     */
    eProsima_user_DllExport PIDIMMGetResponse(
            PIDIMMGetResponse&& x) noexcept
    {
        m_source = std::move(x.m_source);
        m_timestamp = x.m_timestamp;
        m_status = std::move(x.m_status);
        m_control_position_kp_imm = x.m_control_position_kp_imm;
        m_control_velocity_kp_imm = x.m_control_velocity_kp_imm;
        m_control_velocity_ki_imm = x.m_control_velocity_ki_imm;
        m_control_current_kp_imm = x.m_control_current_kp_imm;
        m_control_current_ki_imm = x.m_control_current_ki_imm;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object PIDIMMGetResponse that will be copied.
     */
    eProsima_user_DllExport PIDIMMGetResponse& operator =(
            const PIDIMMGetResponse& x)
    {

                    m_source = x.m_source;

                    m_timestamp = x.m_timestamp;

                    m_status = x.m_status;

                    m_control_position_kp_imm = x.m_control_position_kp_imm;

                    m_control_velocity_kp_imm = x.m_control_velocity_kp_imm;

                    m_control_velocity_ki_imm = x.m_control_velocity_ki_imm;

                    m_control_current_kp_imm = x.m_control_current_kp_imm;

                    m_control_current_ki_imm = x.m_control_current_ki_imm;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object PIDIMMGetResponse that will be copied.
     */
    eProsima_user_DllExport PIDIMMGetResponse& operator =(
            PIDIMMGetResponse&& x) noexcept
    {

        m_source = std::move(x.m_source);
        m_timestamp = x.m_timestamp;
        m_status = std::move(x.m_status);
        m_control_position_kp_imm = x.m_control_position_kp_imm;
        m_control_velocity_kp_imm = x.m_control_velocity_kp_imm;
        m_control_velocity_ki_imm = x.m_control_velocity_ki_imm;
        m_control_current_kp_imm = x.m_control_current_kp_imm;
        m_control_current_ki_imm = x.m_control_current_ki_imm;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x PIDIMMGetResponse object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const PIDIMMGetResponse& x) const
    {
        return (m_source == x.m_source &&
           m_timestamp == x.m_timestamp &&
           m_status == x.m_status &&
           m_control_position_kp_imm == x.m_control_position_kp_imm &&
           m_control_velocity_kp_imm == x.m_control_velocity_kp_imm &&
           m_control_velocity_ki_imm == x.m_control_velocity_ki_imm &&
           m_control_current_kp_imm == x.m_control_current_kp_imm &&
           m_control_current_ki_imm == x.m_control_current_ki_imm);
    }

    /*!
     * @brief Comparison operator.
     * @param x PIDIMMGetResponse object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const PIDIMMGetResponse& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member source
     * @param _source New value to be copied in member source
     */
    eProsima_user_DllExport void source(
            const std::string& _source)
    {
        m_source = _source;
    }

    /*!
     * @brief This function moves the value in member source
     * @param _source New value to be moved in member source
     */
    eProsima_user_DllExport void source(
            std::string&& _source)
    {
        m_source = std::move(_source);
    }

    /*!
     * @brief This function returns a constant reference to member source
     * @return Constant reference to member source
     */
    eProsima_user_DllExport const std::string& source() const
    {
        return m_source;
    }

    /*!
     * @brief This function returns a reference to member source
     * @return Reference to member source
     */
    eProsima_user_DllExport std::string& source()
    {
        return m_source;
    }


    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp()
    {
        return m_timestamp;
    }


    /*!
     * @brief This function copies the value in member status
     * @param _status New value to be copied in member status
     */
    eProsima_user_DllExport void status(
            const std::string& _status)
    {
        m_status = _status;
    }

    /*!
     * @brief This function moves the value in member status
     * @param _status New value to be moved in member status
     */
    eProsima_user_DllExport void status(
            std::string&& _status)
    {
        m_status = std::move(_status);
    }

    /*!
     * @brief This function returns a constant reference to member status
     * @return Constant reference to member status
     */
    eProsima_user_DllExport const std::string& status() const
    {
        return m_status;
    }

    /*!
     * @brief This function returns a reference to member status
     * @return Reference to member status
     */
    eProsima_user_DllExport std::string& status()
    {
        return m_status;
    }


    /*!
     * @brief This function sets a value in member control_position_kp_imm
     * @param _control_position_kp_imm New value for member control_position_kp_imm
     */
    eProsima_user_DllExport void control_position_kp_imm(
            float _control_position_kp_imm)
    {
        m_control_position_kp_imm = _control_position_kp_imm;
    }

    /*!
     * @brief This function returns the value of member control_position_kp_imm
     * @return Value of member control_position_kp_imm
     */
    eProsima_user_DllExport float control_position_kp_imm() const
    {
        return m_control_position_kp_imm;
    }

    /*!
     * @brief This function returns a reference to member control_position_kp_imm
     * @return Reference to member control_position_kp_imm
     */
    eProsima_user_DllExport float& control_position_kp_imm()
    {
        return m_control_position_kp_imm;
    }


    /*!
     * @brief This function sets a value in member control_velocity_kp_imm
     * @param _control_velocity_kp_imm New value for member control_velocity_kp_imm
     */
    eProsima_user_DllExport void control_velocity_kp_imm(
            float _control_velocity_kp_imm)
    {
        m_control_velocity_kp_imm = _control_velocity_kp_imm;
    }

    /*!
     * @brief This function returns the value of member control_velocity_kp_imm
     * @return Value of member control_velocity_kp_imm
     */
    eProsima_user_DllExport float control_velocity_kp_imm() const
    {
        return m_control_velocity_kp_imm;
    }

    /*!
     * @brief This function returns a reference to member control_velocity_kp_imm
     * @return Reference to member control_velocity_kp_imm
     */
    eProsima_user_DllExport float& control_velocity_kp_imm()
    {
        return m_control_velocity_kp_imm;
    }


    /*!
     * @brief This function sets a value in member control_velocity_ki_imm
     * @param _control_velocity_ki_imm New value for member control_velocity_ki_imm
     */
    eProsima_user_DllExport void control_velocity_ki_imm(
            float _control_velocity_ki_imm)
    {
        m_control_velocity_ki_imm = _control_velocity_ki_imm;
    }

    /*!
     * @brief This function returns the value of member control_velocity_ki_imm
     * @return Value of member control_velocity_ki_imm
     */
    eProsima_user_DllExport float control_velocity_ki_imm() const
    {
        return m_control_velocity_ki_imm;
    }

    /*!
     * @brief This function returns a reference to member control_velocity_ki_imm
     * @return Reference to member control_velocity_ki_imm
     */
    eProsima_user_DllExport float& control_velocity_ki_imm()
    {
        return m_control_velocity_ki_imm;
    }


    /*!
     * @brief This function sets a value in member control_current_kp_imm
     * @param _control_current_kp_imm New value for member control_current_kp_imm
     */
    eProsima_user_DllExport void control_current_kp_imm(
            float _control_current_kp_imm)
    {
        m_control_current_kp_imm = _control_current_kp_imm;
    }

    /*!
     * @brief This function returns the value of member control_current_kp_imm
     * @return Value of member control_current_kp_imm
     */
    eProsima_user_DllExport float control_current_kp_imm() const
    {
        return m_control_current_kp_imm;
    }

    /*!
     * @brief This function returns a reference to member control_current_kp_imm
     * @return Reference to member control_current_kp_imm
     */
    eProsima_user_DllExport float& control_current_kp_imm()
    {
        return m_control_current_kp_imm;
    }


    /*!
     * @brief This function sets a value in member control_current_ki_imm
     * @param _control_current_ki_imm New value for member control_current_ki_imm
     */
    eProsima_user_DllExport void control_current_ki_imm(
            float _control_current_ki_imm)
    {
        m_control_current_ki_imm = _control_current_ki_imm;
    }

    /*!
     * @brief This function returns the value of member control_current_ki_imm
     * @return Value of member control_current_ki_imm
     */
    eProsima_user_DllExport float control_current_ki_imm() const
    {
        return m_control_current_ki_imm;
    }

    /*!
     * @brief This function returns a reference to member control_current_ki_imm
     * @return Reference to member control_current_ki_imm
     */
    eProsima_user_DllExport float& control_current_ki_imm()
    {
        return m_control_current_ki_imm;
    }



private:

    std::string m_source;
    uint64_t m_timestamp{0};
    std::string m_status;
    float m_control_position_kp_imm{0.0};
    float m_control_velocity_kp_imm{0.0};
    float m_control_velocity_ki_imm{0.0};
    float m_control_current_kp_imm{0.0};
    float m_control_current_ki_imm{0.0};

};
/*!
 * @brief This class represents the structure PIDIMMSetRequest defined by the user in the IDL file.
 * @ingroup RobotSystem
 */
class PIDIMMSetRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport PIDIMMSetRequest()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~PIDIMMSetRequest()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object PIDIMMSetRequest that will be copied.
     */
    eProsima_user_DllExport PIDIMMSetRequest(
            const PIDIMMSetRequest& x)
    {
                    m_target = x.m_target;

                    m_control_position_kp_imm = x.m_control_position_kp_imm;

                    m_control_velocity_kp_imm = x.m_control_velocity_kp_imm;

                    m_control_velocity_ki_imm = x.m_control_velocity_ki_imm;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object PIDIMMSetRequest that will be copied.
     */
    eProsima_user_DllExport PIDIMMSetRequest(
            PIDIMMSetRequest&& x) noexcept
    {
        m_target = std::move(x.m_target);
        m_control_position_kp_imm = x.m_control_position_kp_imm;
        m_control_velocity_kp_imm = x.m_control_velocity_kp_imm;
        m_control_velocity_ki_imm = x.m_control_velocity_ki_imm;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object PIDIMMSetRequest that will be copied.
     */
    eProsima_user_DllExport PIDIMMSetRequest& operator =(
            const PIDIMMSetRequest& x)
    {

                    m_target = x.m_target;

                    m_control_position_kp_imm = x.m_control_position_kp_imm;

                    m_control_velocity_kp_imm = x.m_control_velocity_kp_imm;

                    m_control_velocity_ki_imm = x.m_control_velocity_ki_imm;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object PIDIMMSetRequest that will be copied.
     */
    eProsima_user_DllExport PIDIMMSetRequest& operator =(
            PIDIMMSetRequest&& x) noexcept
    {

        m_target = std::move(x.m_target);
        m_control_position_kp_imm = x.m_control_position_kp_imm;
        m_control_velocity_kp_imm = x.m_control_velocity_kp_imm;
        m_control_velocity_ki_imm = x.m_control_velocity_ki_imm;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x PIDIMMSetRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const PIDIMMSetRequest& x) const
    {
        return (m_target == x.m_target &&
           m_control_position_kp_imm == x.m_control_position_kp_imm &&
           m_control_velocity_kp_imm == x.m_control_velocity_kp_imm &&
           m_control_velocity_ki_imm == x.m_control_velocity_ki_imm);
    }

    /*!
     * @brief Comparison operator.
     * @param x PIDIMMSetRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const PIDIMMSetRequest& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member target
     * @param _target New value to be copied in member target
     */
    eProsima_user_DllExport void target(
            const std::string& _target)
    {
        m_target = _target;
    }

    /*!
     * @brief This function moves the value in member target
     * @param _target New value to be moved in member target
     */
    eProsima_user_DllExport void target(
            std::string&& _target)
    {
        m_target = std::move(_target);
    }

    /*!
     * @brief This function returns a constant reference to member target
     * @return Constant reference to member target
     */
    eProsima_user_DllExport const std::string& target() const
    {
        return m_target;
    }

    /*!
     * @brief This function returns a reference to member target
     * @return Reference to member target
     */
    eProsima_user_DllExport std::string& target()
    {
        return m_target;
    }


    /*!
     * @brief This function sets a value in member control_position_kp_imm
     * @param _control_position_kp_imm New value for member control_position_kp_imm
     */
    eProsima_user_DllExport void control_position_kp_imm(
            float _control_position_kp_imm)
    {
        m_control_position_kp_imm = _control_position_kp_imm;
    }

    /*!
     * @brief This function returns the value of member control_position_kp_imm
     * @return Value of member control_position_kp_imm
     */
    eProsima_user_DllExport float control_position_kp_imm() const
    {
        return m_control_position_kp_imm;
    }

    /*!
     * @brief This function returns a reference to member control_position_kp_imm
     * @return Reference to member control_position_kp_imm
     */
    eProsima_user_DllExport float& control_position_kp_imm()
    {
        return m_control_position_kp_imm;
    }


    /*!
     * @brief This function sets a value in member control_velocity_kp_imm
     * @param _control_velocity_kp_imm New value for member control_velocity_kp_imm
     */
    eProsima_user_DllExport void control_velocity_kp_imm(
            float _control_velocity_kp_imm)
    {
        m_control_velocity_kp_imm = _control_velocity_kp_imm;
    }

    /*!
     * @brief This function returns the value of member control_velocity_kp_imm
     * @return Value of member control_velocity_kp_imm
     */
    eProsima_user_DllExport float control_velocity_kp_imm() const
    {
        return m_control_velocity_kp_imm;
    }

    /*!
     * @brief This function returns a reference to member control_velocity_kp_imm
     * @return Reference to member control_velocity_kp_imm
     */
    eProsima_user_DllExport float& control_velocity_kp_imm()
    {
        return m_control_velocity_kp_imm;
    }


    /*!
     * @brief This function sets a value in member control_velocity_ki_imm
     * @param _control_velocity_ki_imm New value for member control_velocity_ki_imm
     */
    eProsima_user_DllExport void control_velocity_ki_imm(
            float _control_velocity_ki_imm)
    {
        m_control_velocity_ki_imm = _control_velocity_ki_imm;
    }

    /*!
     * @brief This function returns the value of member control_velocity_ki_imm
     * @return Value of member control_velocity_ki_imm
     */
    eProsima_user_DllExport float control_velocity_ki_imm() const
    {
        return m_control_velocity_ki_imm;
    }

    /*!
     * @brief This function returns a reference to member control_velocity_ki_imm
     * @return Reference to member control_velocity_ki_imm
     */
    eProsima_user_DllExport float& control_velocity_ki_imm()
    {
        return m_control_velocity_ki_imm;
    }



private:

    std::string m_target;
    float m_control_position_kp_imm{0.0};
    float m_control_velocity_kp_imm{0.0};
    float m_control_velocity_ki_imm{0.0};

};
/*!
 * @brief This class represents the structure PIDIMMSetResponse defined by the user in the IDL file.
 * @ingroup RobotSystem
 */
class PIDIMMSetResponse
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport PIDIMMSetResponse()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~PIDIMMSetResponse()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object PIDIMMSetResponse that will be copied.
     */
    eProsima_user_DllExport PIDIMMSetResponse(
            const PIDIMMSetResponse& x)
    {
                    m_source = x.m_source;

                    m_timestamp = x.m_timestamp;

                    m_status = x.m_status;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object PIDIMMSetResponse that will be copied.
     */
    eProsima_user_DllExport PIDIMMSetResponse(
            PIDIMMSetResponse&& x) noexcept
    {
        m_source = std::move(x.m_source);
        m_timestamp = x.m_timestamp;
        m_status = std::move(x.m_status);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object PIDIMMSetResponse that will be copied.
     */
    eProsima_user_DllExport PIDIMMSetResponse& operator =(
            const PIDIMMSetResponse& x)
    {

                    m_source = x.m_source;

                    m_timestamp = x.m_timestamp;

                    m_status = x.m_status;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object PIDIMMSetResponse that will be copied.
     */
    eProsima_user_DllExport PIDIMMSetResponse& operator =(
            PIDIMMSetResponse&& x) noexcept
    {

        m_source = std::move(x.m_source);
        m_timestamp = x.m_timestamp;
        m_status = std::move(x.m_status);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x PIDIMMSetResponse object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const PIDIMMSetResponse& x) const
    {
        return (m_source == x.m_source &&
           m_timestamp == x.m_timestamp &&
           m_status == x.m_status);
    }

    /*!
     * @brief Comparison operator.
     * @param x PIDIMMSetResponse object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const PIDIMMSetResponse& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member source
     * @param _source New value to be copied in member source
     */
    eProsima_user_DllExport void source(
            const std::string& _source)
    {
        m_source = _source;
    }

    /*!
     * @brief This function moves the value in member source
     * @param _source New value to be moved in member source
     */
    eProsima_user_DllExport void source(
            std::string&& _source)
    {
        m_source = std::move(_source);
    }

    /*!
     * @brief This function returns a constant reference to member source
     * @return Constant reference to member source
     */
    eProsima_user_DllExport const std::string& source() const
    {
        return m_source;
    }

    /*!
     * @brief This function returns a reference to member source
     * @return Reference to member source
     */
    eProsima_user_DllExport std::string& source()
    {
        return m_source;
    }


    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp()
    {
        return m_timestamp;
    }


    /*!
     * @brief This function copies the value in member status
     * @param _status New value to be copied in member status
     */
    eProsima_user_DllExport void status(
            const std::string& _status)
    {
        m_status = _status;
    }

    /*!
     * @brief This function moves the value in member status
     * @param _status New value to be moved in member status
     */
    eProsima_user_DllExport void status(
            std::string&& _status)
    {
        m_status = std::move(_status);
    }

    /*!
     * @brief This function returns a constant reference to member status
     * @return Constant reference to member status
     */
    eProsima_user_DllExport const std::string& status() const
    {
        return m_status;
    }

    /*!
     * @brief This function returns a reference to member status
     * @return Reference to member status
     */
    eProsima_user_DllExport std::string& status()
    {
        return m_status;
    }



private:

    std::string m_source;
    uint64_t m_timestamp{0};
    std::string m_status;

};

} // namespace RobotSystem

#endif // _FAST_DDS_GENERATED_ROBOTSYSTEM_ROBOTSYSTEM_HPP_


